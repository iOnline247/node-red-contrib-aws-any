(function main($) {
  const serviceDefinitions = {
    ACM: {
      name: "ACM",
      methods: [
        "addTagsToCertificate",
        "deleteCertificate",
        "describeCertificate",
        "exportCertificate",
        "getCertificate",
        "importCertificate",
        "listCertificates",
        "listTagsForCertificate",
        "removeTagsFromCertificate",
        "renewCertificate",
        "requestCertificate",
        "resendValidationEmail",
        "updateCertificateOptions"
      ]
    },
    APIGateway: {
      name: "APIGateway",
      methods: [
        "createApiKey",
        "createAuthorizer",
        "createBasePathMapping",
        "createDeployment",
        "createDocumentationPart",
        "createDocumentationVersion",
        "createDomainName",
        "createModel",
        "createRequestValidator",
        "createResource",
        "createRestApi",
        "createStage",
        "createUsagePlan",
        "createUsagePlanKey",
        "createVpcLink",
        "deleteApiKey",
        "deleteAuthorizer",
        "deleteBasePathMapping",
        "deleteClientCertificate",
        "deleteDeployment",
        "deleteDocumentationPart",
        "deleteDocumentationVersion",
        "deleteDomainName",
        "deleteGatewayResponse",
        "deleteIntegration",
        "deleteIntegrationResponse",
        "deleteMethod",
        "deleteMethodResponse",
        "deleteModel",
        "deleteRequestValidator",
        "deleteResource",
        "deleteRestApi",
        "deleteStage",
        "deleteUsagePlan",
        "deleteUsagePlanKey",
        "deleteVpcLink",
        "flushStageAuthorizersCache",
        "flushStageCache",
        "generateClientCertificate",
        "getAccount",
        "getApiKey",
        "getApiKeys",
        "getAuthorizer",
        "getAuthorizers",
        "getBasePathMapping",
        "getBasePathMappings",
        "getClientCertificate",
        "getClientCertificates",
        "getDeployment",
        "getDeployments",
        "getDocumentationPart",
        "getDocumentationParts",
        "getDocumentationVersion",
        "getDocumentationVersions",
        "getDomainName",
        "getDomainNames",
        "getExport",
        "getGatewayResponse",
        "getGatewayResponses",
        "getIntegration",
        "getIntegrationResponse",
        "getMethod",
        "getMethodResponse",
        "getModel",
        "getModelTemplate",
        "getModels",
        "getRequestValidator",
        "getRequestValidators",
        "getResource",
        "getResources",
        "getRestApi",
        "getRestApis",
        "getSdk",
        "getSdkType",
        "getSdkTypes",
        "getStage",
        "getStages",
        "getTags",
        "getUsage",
        "getUsagePlan",
        "getUsagePlanKey",
        "getUsagePlanKeys",
        "getUsagePlans",
        "getVpcLink",
        "getVpcLinks",
        "importApiKeys",
        "importDocumentationParts",
        "importRestApi",
        "putGatewayResponse",
        "putIntegration",
        "putIntegrationResponse",
        "putMethod",
        "putMethodResponse",
        "putRestApi",
        "tagResource",
        "testInvokeAuthorizer",
        "testInvokeMethod",
        "untagResource",
        "updateAccount",
        "updateApiKey",
        "updateAuthorizer",
        "updateBasePathMapping",
        "updateClientCertificate",
        "updateDeployment",
        "updateDocumentationPart",
        "updateDocumentationVersion",
        "updateDomainName",
        "updateGatewayResponse",
        "updateIntegration",
        "updateIntegrationResponse",
        "updateMethod",
        "updateMethodResponse",
        "updateModel",
        "updateRequestValidator",
        "updateResource",
        "updateRestApi",
        "updateStage",
        "updateUsage",
        "updateUsagePlan",
        "updateVpcLink"
      ]
    },
    ApplicationAutoScaling: {
      name: "ApplicationAutoScaling",
      methods: [
        "deleteScalingPolicy",
        "deleteScheduledAction",
        "deregisterScalableTarget",
        "describeScalableTargets",
        "describeScalingActivities",
        "describeScalingPolicies",
        "describeScheduledActions",
        "putScalingPolicy",
        "putScheduledAction",
        "registerScalableTarget"
      ]
    },
    AppStream: {
      name: "AppStream",
      methods: [
        "associateFleet",
        "batchAssociateUserStack",
        "batchDisassociateUserStack",
        "copyImage",
        "createDirectoryConfig",
        "createFleet",
        "createImageBuilder",
        "createImageBuilderStreamingURL",
        "createStack",
        "createStreamingURL",
        "createUsageReportSubscription",
        "createUser",
        "deleteDirectoryConfig",
        "deleteFleet",
        "deleteImage",
        "deleteImageBuilder",
        "deleteImagePermissions",
        "deleteStack",
        "deleteUsageReportSubscription",
        "deleteUser",
        "describeDirectoryConfigs",
        "describeFleets",
        "describeImageBuilders",
        "describeImagePermissions",
        "describeImages",
        "describeSessions",
        "describeStacks",
        "describeUsageReportSubscriptions",
        "describeUserStackAssociations",
        "describeUsers",
        "disableUser",
        "disassociateFleet",
        "enableUser",
        "expireSession",
        "listAssociatedFleets",
        "listAssociatedStacks",
        "listTagsForResource",
        "startFleet",
        "startImageBuilder",
        "stopFleet",
        "stopImageBuilder",
        "tagResource",
        "untagResource",
        "updateDirectoryConfig",
        "updateFleet",
        "updateImagePermissions",
        "updateStack"
      ]
    },
    AutoScaling: {
      name: "AutoScaling",
      methods: [
        "attachInstances",
        "attachLoadBalancerTargetGroups",
        "attachLoadBalancers",
        "batchDeleteScheduledAction",
        "batchPutScheduledUpdateGroupAction",
        "completeLifecycleAction",
        "createAutoScalingGroup",
        "createLaunchConfiguration",
        "createOrUpdateTags",
        "deleteAutoScalingGroup",
        "deleteLaunchConfiguration",
        "deleteLifecycleHook",
        "deleteNotificationConfiguration",
        "deletePolicy",
        "deleteScheduledAction",
        "deleteTags",
        "describeAccountLimits",
        "describeAdjustmentTypes",
        "describeAutoScalingGroups",
        "describeAutoScalingInstances",
        "describeAutoScalingNotificationTypes",
        "describeLaunchConfigurations",
        "describeLifecycleHookTypes",
        "describeLifecycleHooks",
        "describeLoadBalancerTargetGroups",
        "describeLoadBalancers",
        "describeMetricCollectionTypes",
        "describeNotificationConfigurations",
        "describePolicies",
        "describeScalingActivities",
        "describeScalingProcessTypes",
        "describeScheduledActions",
        "describeTags",
        "describeTerminationPolicyTypes",
        "detachInstances",
        "detachLoadBalancerTargetGroups",
        "detachLoadBalancers",
        "disableMetricsCollection",
        "enableMetricsCollection",
        "enterStandby",
        "executePolicy",
        "exitStandby",
        "putLifecycleHook",
        "putNotificationConfiguration",
        "putScalingPolicy",
        "putScheduledUpdateGroupAction",
        "recordLifecycleActionHeartbeat",
        "resumeProcesses",
        "setDesiredCapacity",
        "setInstanceHealth",
        "setInstanceProtection",
        "suspendProcesses",
        "terminateInstanceInAutoScalingGroup",
        "updateAutoScalingGroup"
      ]
    },
    Batch: {
      name: "Batch",
      methods: [
        "cancelJob",
        "createComputeEnvironment",
        "createJobQueue",
        "deleteComputeEnvironment",
        "deleteJobQueue",
        "deregisterJobDefinition",
        "describeComputeEnvironments",
        "describeJobDefinitions",
        "describeJobQueues",
        "describeJobs",
        "listJobs",
        "registerJobDefinition",
        "submitJob",
        "terminateJob",
        "updateComputeEnvironment",
        "updateJobQueue"
      ]
    },
    Budgets: {
      name: "Budgets",
      methods: [
        "createBudget",
        "createNotification",
        "createSubscriber",
        "deleteBudget",
        "deleteNotification",
        "deleteSubscriber",
        "describeBudget",
        "describeBudgetPerformanceHistory",
        "describeBudgets",
        "describeNotificationsForBudget",
        "describeSubscribersForNotification",
        "updateBudget",
        "updateNotification",
        "updateSubscriber"
      ]
    },
    CloudDirectory: {
      name: "CloudDirectory",
      methods: [
        "addFacetToObject",
        "applySchema",
        "attachObject",
        "attachPolicy",
        "attachToIndex",
        "attachTypedLink",
        "batchRead",
        "batchWrite",
        "createDirectory",
        "createFacet",
        "createIndex",
        "createObject",
        "createSchema",
        "createTypedLinkFacet",
        "deleteDirectory",
        "deleteFacet",
        "deleteObject",
        "deleteSchema",
        "deleteTypedLinkFacet",
        "detachFromIndex",
        "detachObject",
        "detachPolicy",
        "detachTypedLink",
        "disableDirectory",
        "enableDirectory",
        "getAppliedSchemaVersion",
        "getDirectory",
        "getFacet",
        "getLinkAttributes",
        "getObjectAttributes",
        "getObjectInformation",
        "getSchemaAsJson",
        "getTypedLinkFacetInformation",
        "listAppliedSchemaArns",
        "listAttachedIndices",
        "listDevelopmentSchemaArns",
        "listDirectories",
        "listFacetAttributes",
        "listFacetNames",
        "listIncomingTypedLinks",
        "listIndex",
        "listObjectAttributes",
        "listObjectChildren",
        "listObjectParentPaths",
        "listObjectParents",
        "listObjectPolicies",
        "listOutgoingTypedLinks",
        "listPolicyAttachments",
        "listPublishedSchemaArns",
        "listTagsForResource",
        "listTypedLinkFacetAttributes",
        "listTypedLinkFacetNames",
        "lookupPolicy",
        "publishSchema",
        "putSchemaFromJson",
        "removeFacetFromObject",
        "tagResource",
        "untagResource",
        "updateFacet",
        "updateLinkAttributes",
        "updateObjectAttributes",
        "updateSchema",
        "updateTypedLinkFacet",
        "upgradeAppliedSchema",
        "upgradePublishedSchema"
      ]
    },
    CloudFormation: {
      name: "CloudFormation",
      methods: [
        "cancelUpdateStack",
        "continueUpdateRollback",
        "createChangeSet",
        "createStack",
        "createStackInstances",
        "createStackSet",
        "deleteChangeSet",
        "deleteStack",
        "deleteStackInstances",
        "deleteStackSet",
        "deregisterType",
        "describeAccountLimits",
        "describeChangeSet",
        "describeStackDriftDetectionStatus",
        "describeStackEvents",
        "describeStackInstance",
        "describeStackResource",
        "describeStackResourceDrifts",
        "describeStackResources",
        "describeStackSet",
        "describeStackSetOperation",
        "describeStacks",
        "describeType",
        "describeTypeRegistration",
        "detectStackDrift",
        "detectStackResourceDrift",
        "detectStackSetDrift",
        "estimateTemplateCost",
        "executeChangeSet",
        "getStackPolicy",
        "getTemplate",
        "getTemplateSummary",
        "listChangeSets",
        "listExports",
        "listImports",
        "listStackInstances",
        "listStackResources",
        "listStackSetOperationResults",
        "listStackSetOperations",
        "listStackSets",
        "listStacks",
        "listTypeRegistrations",
        "listTypeVersions",
        "listTypes",
        "recordHandlerProgress",
        "registerType",
        "setStackPolicy",
        "setTypeDefaultVersion",
        "signalResource",
        "stopStackSetOperation",
        "updateStack",
        "updateStackInstances",
        "updateStackSet",
        "updateTerminationProtection",
        "validateTemplate"
      ]
    },
    CloudFront: {
      name: "CloudFront",
      methods: [
        "createCloudFrontOriginAccessIdentity",
        "createDistribution",
        "createDistributionWithTags",
        "createInvalidation",
        "createStreamingDistribution",
        "createStreamingDistributionWithTags",
        "deleteCloudFrontOriginAccessIdentity",
        "deleteDistribution",
        "deleteStreamingDistribution",
        "getCloudFrontOriginAccessIdentity",
        "getCloudFrontOriginAccessIdentityConfig",
        "getDistribution",
        "getDistributionConfig",
        "getInvalidation",
        "getStreamingDistribution",
        "getStreamingDistributionConfig",
        "listCloudFrontOriginAccessIdentities",
        "listDistributions",
        "listDistributionsByWebACLId",
        "listInvalidations",
        "listStreamingDistributions",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateCloudFrontOriginAccessIdentity",
        "updateDistribution",
        "updateStreamingDistribution"
      ]
    },
    CloudHSM: {
      name: "CloudHSM",
      methods: [
        "addTagsToResource",
        "createHapg",
        "createHsm",
        "createLunaClient",
        "deleteHapg",
        "deleteHsm",
        "deleteLunaClient",
        "describeHapg",
        "describeHsm",
        "describeLunaClient",
        "getConfig",
        "listAvailableZones",
        "listHapgs",
        "listHsms",
        "listLunaClients",
        "listTagsForResource",
        "modifyHapg",
        "modifyHsm",
        "modifyLunaClient",
        "removeTagsFromResource"
      ]
    },
    CloudSearch: {
      name: "CloudSearch",
      methods: [
        "createDomain",
        "defineIndexField",
        "defineRankExpression",
        "deleteDomain",
        "deleteIndexField",
        "deleteRankExpression",
        "describeAvailabilityOptions",
        "describeDefaultSearchField",
        "describeDomains",
        "describeIndexFields",
        "describeRankExpressions",
        "describeServiceAccessPolicies",
        "describeStemmingOptions",
        "describeStopwordOptions",
        "describeSynonymOptions",
        "indexDocuments",
        "updateAvailabilityOptions",
        "updateDefaultSearchField",
        "updateServiceAccessPolicies",
        "updateStemmingOptions",
        "updateStopwordOptions",
        "updateSynonymOptions"
      ]
    },
    CloudSearchDomain: {
      name: "CloudSearchDomain",
      methods: ["search", "suggest", "uploadDocuments"]
    },
    CloudTrail: {
      name: "CloudTrail",
      methods: [
        "addTags",
        "createTrail",
        "deleteTrail",
        "describeTrails",
        "getEventSelectors",
        "getInsightSelectors",
        "getTrail",
        "getTrailStatus",
        "listPublicKeys",
        "listTags",
        "listTrails",
        "lookupEvents",
        "putEventSelectors",
        "putInsightSelectors",
        "removeTags",
        "startLogging",
        "stopLogging",
        "updateTrail"
      ]
    },
    CloudWatch: {
      name: "CloudWatch",
      methods: [
        "deleteAlarms",
        "deleteAnomalyDetector",
        "deleteDashboards",
        "deleteInsightRules",
        "describeAlarmHistory",
        "describeAlarms",
        "describeAlarmsForMetric",
        "describeAnomalyDetectors",
        "describeInsightRules",
        "disableAlarmActions",
        "disableInsightRules",
        "enableAlarmActions",
        "enableInsightRules",
        "getDashboard",
        "getInsightRuleReport",
        "getMetricData",
        "getMetricStatistics",
        "getMetricWidgetImage",
        "listDashboards",
        "listMetrics",
        "listTagsForResource",
        "putAnomalyDetector",
        "putDashboard",
        "putInsightRule",
        "putMetricAlarm",
        "putMetricData",
        "setAlarmState",
        "tagResource",
        "untagResource"
      ]
    },
    CloudWatchEvents: {
      name: "CloudWatchEvents",
      methods: [
        "activateEventSource",
        "createEventBus",
        "createPartnerEventSource",
        "deactivateEventSource",
        "deleteEventBus",
        "deletePartnerEventSource",
        "deleteRule",
        "describeEventBus",
        "describeEventSource",
        "describePartnerEventSource",
        "describeRule",
        "disableRule",
        "enableRule",
        "listEventBuses",
        "listEventSources",
        "listPartnerEventSourceAccounts",
        "listPartnerEventSources",
        "listRuleNamesByTarget",
        "listRules",
        "listTagsForResource",
        "listTargetsByRule",
        "putEvents",
        "putPartnerEvents",
        "putPermission",
        "putRule",
        "putTargets",
        "removePermission",
        "removeTargets",
        "tagResource",
        "testEventPattern",
        "untagResource"
      ]
    },
    CloudWatchLogs: {
      name: "CloudWatchLogs",
      methods: [
        "associateKmsKey",
        "cancelExportTask",
        "createExportTask",
        "createLogGroup",
        "createLogStream",
        "deleteDestination",
        "deleteLogGroup",
        "deleteLogStream",
        "deleteMetricFilter",
        "deleteResourcePolicy",
        "deleteRetentionPolicy",
        "deleteSubscriptionFilter",
        "describeDestinations",
        "describeExportTasks",
        "describeLogGroups",
        "describeLogStreams",
        "describeMetricFilters",
        "describeQueries",
        "describeResourcePolicies",
        "describeSubscriptionFilters",
        "disassociateKmsKey",
        "filterLogEvents",
        "getLogEvents",
        "getLogGroupFields",
        "getLogRecord",
        "getQueryResults",
        "listTagsLogGroup",
        "putDestination",
        "putDestinationPolicy",
        "putLogEvents",
        "putMetricFilter",
        "putResourcePolicy",
        "putRetentionPolicy",
        "putSubscriptionFilter",
        "startQuery",
        "stopQuery",
        "tagLogGroup",
        "testMetricFilter",
        "untagLogGroup"
      ]
    },
    CodeBuild: {
      name: "CodeBuild",
      methods: [
        "batchDeleteBuilds",
        "batchGetBuilds",
        "batchGetProjects",
        "batchGetReportGroups",
        "batchGetReports",
        "createProject",
        "createReportGroup",
        "createWebhook",
        "deleteProject",
        "deleteReport",
        "deleteReportGroup",
        "deleteResourcePolicy",
        "deleteSourceCredentials",
        "deleteWebhook",
        "describeTestCases",
        "getResourcePolicy",
        "importSourceCredentials",
        "invalidateProjectCache",
        "listBuilds",
        "listBuildsForProject",
        "listCuratedEnvironmentImages",
        "listProjects",
        "listReportGroups",
        "listReports",
        "listReportsForReportGroup",
        "listSharedProjects",
        "listSharedReportGroups",
        "listSourceCredentials",
        "putResourcePolicy",
        "startBuild",
        "stopBuild",
        "updateProject",
        "updateReportGroup",
        "updateWebhook"
      ]
    },
    CodeCommit: {
      name: "CodeCommit",
      methods: [
        "associateApprovalRuleTemplateWithRepository",
        "batchAssociateApprovalRuleTemplateWithRepositories",
        "batchDescribeMergeConflicts",
        "batchDisassociateApprovalRuleTemplateFromRepositories",
        "batchGetCommits",
        "batchGetRepositories",
        "createApprovalRuleTemplate",
        "createBranch",
        "createCommit",
        "createPullRequest",
        "createPullRequestApprovalRule",
        "createRepository",
        "createUnreferencedMergeCommit",
        "deleteApprovalRuleTemplate",
        "deleteBranch",
        "deleteCommentContent",
        "deleteFile",
        "deletePullRequestApprovalRule",
        "deleteRepository",
        "describeMergeConflicts",
        "describePullRequestEvents",
        "disassociateApprovalRuleTemplateFromRepository",
        "evaluatePullRequestApprovalRules",
        "getApprovalRuleTemplate",
        "getBlob",
        "getBranch",
        "getComment",
        "getCommentsForComparedCommit",
        "getCommentsForPullRequest",
        "getCommit",
        "getDifferences",
        "getFile",
        "getFolder",
        "getMergeCommit",
        "getMergeConflicts",
        "getMergeOptions",
        "getPullRequest",
        "getPullRequestApprovalStates",
        "getPullRequestOverrideState",
        "getRepository",
        "getRepositoryTriggers",
        "listApprovalRuleTemplates",
        "listAssociatedApprovalRuleTemplatesForRepository",
        "listBranches",
        "listPullRequests",
        "listRepositories",
        "listRepositoriesForApprovalRuleTemplate",
        "listTagsForResource",
        "mergeBranchesByFastForward",
        "mergeBranchesBySquash",
        "mergeBranchesByThreeWay",
        "mergePullRequestByFastForward",
        "mergePullRequestBySquash",
        "mergePullRequestByThreeWay",
        "overridePullRequestApprovalRules",
        "postCommentForComparedCommit",
        "postCommentForPullRequest",
        "postCommentReply",
        "putFile",
        "putRepositoryTriggers",
        "tagResource",
        "testRepositoryTriggers",
        "untagResource",
        "updateApprovalRuleTemplateContent",
        "updateApprovalRuleTemplateDescription",
        "updateApprovalRuleTemplateName",
        "updateComment",
        "updateDefaultBranch",
        "updatePullRequestApprovalRuleContent",
        "updatePullRequestApprovalState",
        "updatePullRequestDescription",
        "updatePullRequestStatus",
        "updatePullRequestTitle",
        "updateRepositoryDescription",
        "updateRepositoryName"
      ]
    },
    CodeDeploy: {
      name: "CodeDeploy",
      methods: [
        "addTagsToOnPremisesInstances",
        "batchGetApplicationRevisions",
        "batchGetApplications",
        "batchGetDeploymentGroups",
        "batchGetDeploymentInstances",
        "batchGetDeploymentTargets",
        "batchGetDeployments",
        "batchGetOnPremisesInstances",
        "continueDeployment",
        "createApplication",
        "createDeployment",
        "createDeploymentConfig",
        "createDeploymentGroup",
        "deleteApplication",
        "deleteDeploymentConfig",
        "deleteDeploymentGroup",
        "deleteGitHubAccountToken",
        "deregisterOnPremisesInstance",
        "getApplication",
        "getApplicationRevision",
        "getDeployment",
        "getDeploymentConfig",
        "getDeploymentGroup",
        "getDeploymentInstance",
        "getDeploymentTarget",
        "getOnPremisesInstance",
        "listApplicationRevisions",
        "listApplications",
        "listDeploymentConfigs",
        "listDeploymentGroups",
        "listDeploymentInstances",
        "listDeploymentTargets",
        "listDeployments",
        "listGitHubAccountTokenNames",
        "listOnPremisesInstances",
        "listTagsForResource",
        "putLifecycleEventHookExecutionStatus",
        "registerApplicationRevision",
        "registerOnPremisesInstance",
        "removeTagsFromOnPremisesInstances",
        "skipWaitTimeForInstanceTermination",
        "stopDeployment",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateDeploymentGroup"
      ]
    },
    CodePipeline: {
      name: "CodePipeline",
      methods: [
        "acknowledgeJob",
        "acknowledgeThirdPartyJob",
        "createCustomActionType",
        "createPipeline",
        "deleteCustomActionType",
        "deletePipeline",
        "deleteWebhook",
        "deregisterWebhookWithThirdParty",
        "disableStageTransition",
        "enableStageTransition",
        "getJobDetails",
        "getPipeline",
        "getPipelineExecution",
        "getPipelineState",
        "getThirdPartyJobDetails",
        "listActionExecutions",
        "listActionTypes",
        "listPipelineExecutions",
        "listPipelines",
        "listTagsForResource",
        "listWebhooks",
        "pollForJobs",
        "pollForThirdPartyJobs",
        "putActionRevision",
        "putApprovalResult",
        "putJobFailureResult",
        "putJobSuccessResult",
        "putThirdPartyJobFailureResult",
        "putThirdPartyJobSuccessResult",
        "putWebhook",
        "registerWebhookWithThirdParty",
        "retryStageExecution",
        "startPipelineExecution",
        "tagResource",
        "untagResource",
        "updatePipeline"
      ]
    },
    CognitoIdentity: {
      name: "CognitoIdentity",
      methods: [
        "createIdentityPool",
        "deleteIdentities",
        "deleteIdentityPool",
        "describeIdentity",
        "describeIdentityPool",
        "getCredentialsForIdentity",
        "getId",
        "getIdentityPoolRoles",
        "getOpenIdToken",
        "getOpenIdTokenForDeveloperIdentity",
        "listIdentities",
        "listIdentityPools",
        "listTagsForResource",
        "lookupDeveloperIdentity",
        "mergeDeveloperIdentities",
        "setIdentityPoolRoles",
        "tagResource",
        "unlinkDeveloperIdentity",
        "unlinkIdentity",
        "untagResource",
        "updateIdentityPool"
      ]
    },
    CognitoIdentityServiceProvider: {
      name: "CognitoIdentityServiceProvider",
      methods: [
        "addCustomAttributes",
        "adminAddUserToGroup",
        "adminConfirmSignUp",
        "adminCreateUser",
        "adminDeleteUser",
        "adminDeleteUserAttributes",
        "adminDisableProviderForUser",
        "adminDisableUser",
        "adminEnableUser",
        "adminForgetDevice",
        "adminGetDevice",
        "adminGetUser",
        "adminInitiateAuth",
        "adminLinkProviderForUser",
        "adminListDevices",
        "adminListGroupsForUser",
        "adminListUserAuthEvents",
        "adminRemoveUserFromGroup",
        "adminResetUserPassword",
        "adminRespondToAuthChallenge",
        "adminSetUserMFAPreference",
        "adminSetUserPassword",
        "adminSetUserSettings",
        "adminUpdateAuthEventFeedback",
        "adminUpdateDeviceStatus",
        "adminUpdateUserAttributes",
        "adminUserGlobalSignOut",
        "associateSoftwareToken",
        "changePassword",
        "confirmDevice",
        "confirmForgotPassword",
        "confirmSignUp",
        "createGroup",
        "createIdentityProvider",
        "createResourceServer",
        "createUserImportJob",
        "createUserPool",
        "createUserPoolClient",
        "createUserPoolDomain",
        "deleteGroup",
        "deleteIdentityProvider",
        "deleteResourceServer",
        "deleteUser",
        "deleteUserAttributes",
        "deleteUserPool",
        "deleteUserPoolClient",
        "deleteUserPoolDomain",
        "describeIdentityProvider",
        "describeResourceServer",
        "describeRiskConfiguration",
        "describeUserImportJob",
        "describeUserPool",
        "describeUserPoolClient",
        "describeUserPoolDomain",
        "forgetDevice",
        "forgotPassword",
        "getCSVHeader",
        "getDevice",
        "getGroup",
        "getIdentityProviderByIdentifier",
        "getSigningCertificate",
        "getUICustomization",
        "getUser",
        "getUserAttributeVerificationCode",
        "getUserPoolMfaConfig",
        "globalSignOut",
        "initiateAuth",
        "listDevices",
        "listGroups",
        "listIdentityProviders",
        "listResourceServers",
        "listTagsForResource",
        "listUserImportJobs",
        "listUserPoolClients",
        "listUserPools",
        "listUsers",
        "listUsersInGroup",
        "resendConfirmationCode",
        "respondToAuthChallenge",
        "setRiskConfiguration",
        "setUICustomization",
        "setUserMFAPreference",
        "setUserPoolMfaConfig",
        "setUserSettings",
        "signUp",
        "startUserImportJob",
        "stopUserImportJob",
        "tagResource",
        "untagResource",
        "updateAuthEventFeedback",
        "updateDeviceStatus",
        "updateGroup",
        "updateIdentityProvider",
        "updateResourceServer",
        "updateUserAttributes",
        "updateUserPool",
        "updateUserPoolClient",
        "updateUserPoolDomain",
        "verifySoftwareToken",
        "verifyUserAttribute"
      ]
    },
    CognitoSync: {
      name: "CognitoSync",
      methods: [
        "bulkPublish",
        "deleteDataset",
        "describeDataset",
        "describeIdentityPoolUsage",
        "describeIdentityUsage",
        "getBulkPublishDetails",
        "getCognitoEvents",
        "getIdentityPoolConfiguration",
        "listDatasets",
        "listIdentityPoolUsage",
        "listRecords",
        "registerDevice",
        "setCognitoEvents",
        "setIdentityPoolConfiguration",
        "subscribeToDataset",
        "unsubscribeFromDataset",
        "updateRecords"
      ]
    },
    ConfigService: {
      name: "ConfigService",
      methods: [
        "batchGetAggregateResourceConfig",
        "batchGetResourceConfig",
        "deleteAggregationAuthorization",
        "deleteConfigRule",
        "deleteConfigurationAggregator",
        "deleteConfigurationRecorder",
        "deleteConformancePack",
        "deleteDeliveryChannel",
        "deleteEvaluationResults",
        "deleteOrganizationConfigRule",
        "deleteOrganizationConformancePack",
        "deletePendingAggregationRequest",
        "deleteRemediationConfiguration",
        "deleteRemediationExceptions",
        "deleteResourceConfig",
        "deleteRetentionConfiguration",
        "deliverConfigSnapshot",
        "describeAggregateComplianceByConfigRules",
        "describeAggregationAuthorizations",
        "describeComplianceByConfigRule",
        "describeComplianceByResource",
        "describeConfigRuleEvaluationStatus",
        "describeConfigRules",
        "describeConfigurationAggregatorSourcesStatus",
        "describeConfigurationAggregators",
        "describeConfigurationRecorderStatus",
        "describeConfigurationRecorders",
        "describeConformancePackCompliance",
        "describeConformancePackStatus",
        "describeConformancePacks",
        "describeDeliveryChannelStatus",
        "describeDeliveryChannels",
        "describeOrganizationConfigRuleStatuses",
        "describeOrganizationConfigRules",
        "describeOrganizationConformancePackStatuses",
        "describeOrganizationConformancePacks",
        "describePendingAggregationRequests",
        "describeRemediationConfigurations",
        "describeRemediationExceptions",
        "describeRemediationExecutionStatus",
        "describeRetentionConfigurations",
        "getAggregateComplianceDetailsByConfigRule",
        "getAggregateConfigRuleComplianceSummary",
        "getAggregateDiscoveredResourceCounts",
        "getAggregateResourceConfig",
        "getComplianceDetailsByConfigRule",
        "getComplianceDetailsByResource",
        "getComplianceSummaryByConfigRule",
        "getComplianceSummaryByResourceType",
        "getConformancePackComplianceDetails",
        "getConformancePackComplianceSummary",
        "getDiscoveredResourceCounts",
        "getOrganizationConfigRuleDetailedStatus",
        "getOrganizationConformancePackDetailedStatus",
        "getResourceConfigHistory",
        "listAggregateDiscoveredResources",
        "listDiscoveredResources",
        "listTagsForResource",
        "putAggregationAuthorization",
        "putConfigRule",
        "putConfigurationAggregator",
        "putConfigurationRecorder",
        "putConformancePack",
        "putDeliveryChannel",
        "putEvaluations",
        "putOrganizationConfigRule",
        "putOrganizationConformancePack",
        "putRemediationConfigurations",
        "putRemediationExceptions",
        "putResourceConfig",
        "putRetentionConfiguration",
        "selectResourceConfig",
        "startConfigRulesEvaluation",
        "startConfigurationRecorder",
        "startRemediationExecution",
        "stopConfigurationRecorder",
        "tagResource",
        "untagResource"
      ]
    },
    CUR: {
      name: "CUR",
      methods: [
        "deleteReportDefinition",
        "describeReportDefinitions",
        "modifyReportDefinition",
        "putReportDefinition"
      ]
    },
    DataPipeline: {
      name: "DataPipeline",
      methods: [
        "activatePipeline",
        "addTags",
        "createPipeline",
        "deactivatePipeline",
        "deletePipeline",
        "describeObjects",
        "describePipelines",
        "evaluateExpression",
        "getPipelineDefinition",
        "listPipelines",
        "pollForTask",
        "putPipelineDefinition",
        "queryObjects",
        "removeTags",
        "reportTaskProgress",
        "reportTaskRunnerHeartbeat",
        "setStatus",
        "setTaskStatus",
        "validatePipelineDefinition"
      ]
    },
    DeviceFarm: {
      name: "DeviceFarm",
      methods: [
        "createDevicePool",
        "createInstanceProfile",
        "createNetworkProfile",
        "createProject",
        "createRemoteAccessSession",
        "createTestGridProject",
        "createTestGridUrl",
        "createUpload",
        "createVPCEConfiguration",
        "deleteDevicePool",
        "deleteInstanceProfile",
        "deleteNetworkProfile",
        "deleteProject",
        "deleteRemoteAccessSession",
        "deleteRun",
        "deleteTestGridProject",
        "deleteUpload",
        "deleteVPCEConfiguration",
        "getAccountSettings",
        "getDevice",
        "getDeviceInstance",
        "getDevicePool",
        "getDevicePoolCompatibility",
        "getInstanceProfile",
        "getJob",
        "getNetworkProfile",
        "getOfferingStatus",
        "getProject",
        "getRemoteAccessSession",
        "getRun",
        "getSuite",
        "getTest",
        "getTestGridProject",
        "getTestGridSession",
        "getUpload",
        "getVPCEConfiguration",
        "installToRemoteAccessSession",
        "listArtifacts",
        "listDeviceInstances",
        "listDevicePools",
        "listDevices",
        "listInstanceProfiles",
        "listJobs",
        "listNetworkProfiles",
        "listOfferingPromotions",
        "listOfferingTransactions",
        "listOfferings",
        "listProjects",
        "listRemoteAccessSessions",
        "listRuns",
        "listSamples",
        "listSuites",
        "listTagsForResource",
        "listTestGridProjects",
        "listTestGridSessionActions",
        "listTestGridSessionArtifacts",
        "listTestGridSessions",
        "listTests",
        "listUniqueProblems",
        "listUploads",
        "listVPCEConfigurations",
        "purchaseOffering",
        "renewOffering",
        "scheduleRun",
        "stopJob",
        "stopRemoteAccessSession",
        "stopRun",
        "tagResource",
        "untagResource",
        "updateDeviceInstance",
        "updateDevicePool",
        "updateInstanceProfile",
        "updateNetworkProfile",
        "updateProject",
        "updateTestGridProject",
        "updateUpload",
        "updateVPCEConfiguration"
      ]
    },
    DirectConnect: {
      name: "DirectConnect",
      methods: [
        "acceptDirectConnectGatewayAssociationProposal",
        "allocateConnectionOnInterconnect",
        "allocateHostedConnection",
        "allocatePrivateVirtualInterface",
        "allocatePublicVirtualInterface",
        "allocateTransitVirtualInterface",
        "associateConnectionWithLag",
        "associateHostedConnection",
        "associateVirtualInterface",
        "confirmConnection",
        "confirmPrivateVirtualInterface",
        "confirmPublicVirtualInterface",
        "confirmTransitVirtualInterface",
        "createBGPPeer",
        "createConnection",
        "createDirectConnectGateway",
        "createDirectConnectGatewayAssociation",
        "createDirectConnectGatewayAssociationProposal",
        "createInterconnect",
        "createLag",
        "createPrivateVirtualInterface",
        "createPublicVirtualInterface",
        "createTransitVirtualInterface",
        "deleteBGPPeer",
        "deleteConnection",
        "deleteDirectConnectGateway",
        "deleteDirectConnectGatewayAssociation",
        "deleteDirectConnectGatewayAssociationProposal",
        "deleteInterconnect",
        "deleteLag",
        "deleteVirtualInterface",
        "describeConnectionLoa",
        "describeConnections",
        "describeConnectionsOnInterconnect",
        "describeDirectConnectGatewayAssociationProposals",
        "describeDirectConnectGatewayAssociations",
        "describeDirectConnectGatewayAttachments",
        "describeDirectConnectGateways",
        "describeHostedConnections",
        "describeInterconnectLoa",
        "describeInterconnects",
        "describeLags",
        "describeLoa",
        "describeLocations",
        "describeTags",
        "describeVirtualGateways",
        "describeVirtualInterfaces",
        "disassociateConnectionFromLag",
        "tagResource",
        "untagResource",
        "updateDirectConnectGatewayAssociation",
        "updateLag",
        "updateVirtualInterfaceAttributes"
      ]
    },
    DirectoryService: {
      name: "DirectoryService",
      methods: [
        "acceptSharedDirectory",
        "addIpRoutes",
        "addTagsToResource",
        "cancelSchemaExtension",
        "connectDirectory",
        "createAlias",
        "createComputer",
        "createConditionalForwarder",
        "createDirectory",
        "createLogSubscription",
        "createMicrosoftAD",
        "createSnapshot",
        "createTrust",
        "deleteConditionalForwarder",
        "deleteDirectory",
        "deleteLogSubscription",
        "deleteSnapshot",
        "deleteTrust",
        "deregisterCertificate",
        "deregisterEventTopic",
        "describeCertificate",
        "describeConditionalForwarders",
        "describeDirectories",
        "describeDomainControllers",
        "describeEventTopics",
        "describeLDAPSSettings",
        "describeSharedDirectories",
        "describeSnapshots",
        "describeTrusts",
        "disableLDAPS",
        "disableRadius",
        "disableSso",
        "enableLDAPS",
        "enableRadius",
        "enableSso",
        "getDirectoryLimits",
        "getSnapshotLimits",
        "listCertificates",
        "listIpRoutes",
        "listLogSubscriptions",
        "listSchemaExtensions",
        "listTagsForResource",
        "registerCertificate",
        "registerEventTopic",
        "rejectSharedDirectory",
        "removeIpRoutes",
        "removeTagsFromResource",
        "resetUserPassword",
        "restoreFromSnapshot",
        "shareDirectory",
        "startSchemaExtension",
        "unshareDirectory",
        "updateConditionalForwarder",
        "updateNumberOfDomainControllers",
        "updateRadius",
        "updateTrust",
        "verifyTrust"
      ]
    },
    Discovery: {
      name: "Discovery",
      methods: [
        "associateConfigurationItemsToApplication",
        "batchDeleteImportData",
        "createApplication",
        "createTags",
        "deleteApplications",
        "deleteTags",
        "describeAgents",
        "describeConfigurations",
        "describeContinuousExports",
        "describeExportConfigurations",
        "describeExportTasks",
        "describeImportTasks",
        "describeTags",
        "disassociateConfigurationItemsFromApplication",
        "exportConfigurations",
        "getDiscoverySummary",
        "listConfigurations",
        "listServerNeighbors",
        "startContinuousExport",
        "startDataCollectionByAgentIds",
        "startExportTask",
        "startImportTask",
        "stopContinuousExport",
        "stopDataCollectionByAgentIds",
        "updateApplication"
      ]
    },
    DMS: {
      name: "DMS",
      methods: [
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "createEndpoint",
        "createEventSubscription",
        "createReplicationInstance",
        "createReplicationSubnetGroup",
        "createReplicationTask",
        "deleteCertificate",
        "deleteConnection",
        "deleteEndpoint",
        "deleteEventSubscription",
        "deleteReplicationInstance",
        "deleteReplicationSubnetGroup",
        "deleteReplicationTask",
        "describeAccountAttributes",
        "describeCertificates",
        "describeConnections",
        "describeEndpointTypes",
        "describeEndpoints",
        "describeEventCategories",
        "describeEventSubscriptions",
        "describeEvents",
        "describeOrderableReplicationInstances",
        "describePendingMaintenanceActions",
        "describeRefreshSchemasStatus",
        "describeReplicationInstanceTaskLogs",
        "describeReplicationInstances",
        "describeReplicationSubnetGroups",
        "describeReplicationTaskAssessmentResults",
        "describeReplicationTasks",
        "describeSchemas",
        "describeTableStatistics",
        "importCertificate",
        "listTagsForResource",
        "modifyEndpoint",
        "modifyEventSubscription",
        "modifyReplicationInstance",
        "modifyReplicationSubnetGroup",
        "modifyReplicationTask",
        "rebootReplicationInstance",
        "refreshSchemas",
        "reloadTables",
        "removeTagsFromResource",
        "startReplicationTask",
        "startReplicationTaskAssessment",
        "stopReplicationTask",
        "testConnection"
      ]
    },
    DynamoDB: {
      name: "DynamoDB",
      methods: [
        "batchGetItem",
        "batchWriteItem",
        "createTable",
        "deleteItem",
        "deleteTable",
        "describeTable",
        "getItem",
        "listTables",
        "putItem",
        "query",
        "scan",
        "updateItem",
        "updateTable"
      ]
    },
    DynamoDBStreams: {
      name: "DynamoDBStreams",
      methods: [
        "describeStream",
        "getRecords",
        "getShardIterator",
        "listStreams"
      ]
    },
    EC2: {
      name: "EC2",
      methods: [
        "acceptReservedInstancesExchangeQuote",
        "acceptTransitGatewayPeeringAttachment",
        "acceptTransitGatewayVpcAttachment",
        "acceptVpcEndpointConnections",
        "acceptVpcPeeringConnection",
        "advertiseByoipCidr",
        "allocateAddress",
        "allocateHosts",
        "applySecurityGroupsToClientVpnTargetNetwork",
        "assignIpv6Addresses",
        "assignPrivateIpAddresses",
        "associateAddress",
        "associateClientVpnTargetNetwork",
        "associateDhcpOptions",
        "associateIamInstanceProfile",
        "associateRouteTable",
        "associateSubnetCidrBlock",
        "associateTransitGatewayMulticastDomain",
        "associateTransitGatewayRouteTable",
        "associateVpcCidrBlock",
        "attachClassicLinkVpc",
        "attachInternetGateway",
        "attachNetworkInterface",
        "attachVolume",
        "attachVpnGateway",
        "authorizeClientVpnIngress",
        "authorizeSecurityGroupEgress",
        "authorizeSecurityGroupIngress",
        "bundleInstance",
        "cancelBundleTask",
        "cancelCapacityReservation",
        "cancelConversionTask",
        "cancelExportTask",
        "cancelImportTask",
        "cancelReservedInstancesListing",
        "cancelSpotFleetRequests",
        "cancelSpotInstanceRequests",
        "confirmProductInstance",
        "copyFpgaImage",
        "copyImage",
        "copySnapshot",
        "createCapacityReservation",
        "createClientVpnEndpoint",
        "createClientVpnRoute",
        "createCustomerGateway",
        "createDefaultSubnet",
        "createDefaultVpc",
        "createDhcpOptions",
        "createEgressOnlyInternetGateway",
        "createFleet",
        "createFlowLogs",
        "createFpgaImage",
        "createImage",
        "createInstanceExportTask",
        "createInternetGateway",
        "createKeyPair",
        "createLaunchTemplate",
        "createLaunchTemplateVersion",
        "createLocalGatewayRoute",
        "createLocalGatewayRouteTableVpcAssociation",
        "createNatGateway",
        "createNetworkAcl",
        "createNetworkAclEntry",
        "createNetworkInterface",
        "createNetworkInterfacePermission",
        "createPlacementGroup",
        "createReservedInstancesListing",
        "createRoute",
        "createRouteTable",
        "createSecurityGroup",
        "createSnapshot",
        "createSnapshots",
        "createSpotDatafeedSubscription",
        "createSubnet",
        "createTags",
        "createTrafficMirrorFilter",
        "createTrafficMirrorFilterRule",
        "createTrafficMirrorSession",
        "createTrafficMirrorTarget",
        "createTransitGateway",
        "createTransitGatewayMulticastDomain",
        "createTransitGatewayPeeringAttachment",
        "createTransitGatewayRoute",
        "createTransitGatewayRouteTable",
        "createTransitGatewayVpcAttachment",
        "createVolume",
        "createVpc",
        "createVpcEndpoint",
        "createVpcEndpointConnectionNotification",
        "createVpcEndpointServiceConfiguration",
        "createVpcPeeringConnection",
        "createVpnConnection",
        "createVpnConnectionRoute",
        "createVpnGateway",
        "deleteClientVpnEndpoint",
        "deleteClientVpnRoute",
        "deleteCustomerGateway",
        "deleteDhcpOptions",
        "deleteEgressOnlyInternetGateway",
        "deleteFleets",
        "deleteFlowLogs",
        "deleteFpgaImage",
        "deleteInternetGateway",
        "deleteKeyPair",
        "deleteLaunchTemplate",
        "deleteLaunchTemplateVersions",
        "deleteLocalGatewayRoute",
        "deleteLocalGatewayRouteTableVpcAssociation",
        "deleteNatGateway",
        "deleteNetworkAcl",
        "deleteNetworkAclEntry",
        "deleteNetworkInterface",
        "deleteNetworkInterfacePermission",
        "deletePlacementGroup",
        "deleteQueuedReservedInstances",
        "deleteRoute",
        "deleteRouteTable",
        "deleteSecurityGroup",
        "deleteSnapshot",
        "deleteSpotDatafeedSubscription",
        "deleteSubnet",
        "deleteTags",
        "deleteTrafficMirrorFilter",
        "deleteTrafficMirrorFilterRule",
        "deleteTrafficMirrorSession",
        "deleteTrafficMirrorTarget",
        "deleteTransitGateway",
        "deleteTransitGatewayMulticastDomain",
        "deleteTransitGatewayPeeringAttachment",
        "deleteTransitGatewayRoute",
        "deleteTransitGatewayRouteTable",
        "deleteTransitGatewayVpcAttachment",
        "deleteVolume",
        "deleteVpc",
        "deleteVpcEndpointConnectionNotifications",
        "deleteVpcEndpointServiceConfigurations",
        "deleteVpcEndpoints",
        "deleteVpcPeeringConnection",
        "deleteVpnConnection",
        "deleteVpnConnectionRoute",
        "deleteVpnGateway",
        "deprovisionByoipCidr",
        "deregisterImage",
        "deregisterTransitGatewayMulticastGroupMembers",
        "deregisterTransitGatewayMulticastGroupSources",
        "describeAccountAttributes",
        "describeAddresses",
        "describeAggregateIdFormat",
        "describeAvailabilityZones",
        "describeBundleTasks",
        "describeByoipCidrs",
        "describeCapacityReservations",
        "describeClassicLinkInstances",
        "describeClientVpnAuthorizationRules",
        "describeClientVpnConnections",
        "describeClientVpnEndpoints",
        "describeClientVpnRoutes",
        "describeClientVpnTargetNetworks",
        "describeCoipPools",
        "describeConversionTasks",
        "describeCustomerGateways",
        "describeDhcpOptions",
        "describeEgressOnlyInternetGateways",
        "describeElasticGpus",
        "describeExportImageTasks",
        "describeExportTasks",
        "describeFastSnapshotRestores",
        "describeFleetHistory",
        "describeFleetInstances",
        "describeFleets",
        "describeFlowLogs",
        "describeFpgaImageAttribute",
        "describeFpgaImages",
        "describeHostReservationOfferings",
        "describeHostReservations",
        "describeHosts",
        "describeIamInstanceProfileAssociations",
        "describeIdFormat",
        "describeIdentityIdFormat",
        "describeImageAttribute",
        "describeImages",
        "describeImportImageTasks",
        "describeImportSnapshotTasks",
        "describeInstanceAttribute",
        "describeInstanceCreditSpecifications",
        "describeInstanceStatus",
        "describeInstanceTypeOfferings",
        "describeInstanceTypes",
        "describeInstances",
        "describeInternetGateways",
        "describeKeyPairs",
        "describeLaunchTemplateVersions",
        "describeLaunchTemplates",
        "describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "describeLocalGatewayRouteTableVpcAssociations",
        "describeLocalGatewayRouteTables",
        "describeLocalGatewayVirtualInterfaceGroups",
        "describeLocalGatewayVirtualInterfaces",
        "describeLocalGateways",
        "describeMovingAddresses",
        "describeNatGateways",
        "describeNetworkAcls",
        "describeNetworkInterfaceAttribute",
        "describeNetworkInterfacePermissions",
        "describeNetworkInterfaces",
        "describePlacementGroups",
        "describePrefixLists",
        "describePrincipalIdFormat",
        "describePublicIpv4Pools",
        "describeRegions",
        "describeReservedInstances",
        "describeReservedInstancesListings",
        "describeReservedInstancesModifications",
        "describeReservedInstancesOfferings",
        "describeRouteTables",
        "describeScheduledInstanceAvailability",
        "describeScheduledInstances",
        "describeSecurityGroupReferences",
        "describeSecurityGroups",
        "describeSnapshotAttribute",
        "describeSnapshots",
        "describeSpotDatafeedSubscription",
        "describeSpotFleetInstances",
        "describeSpotFleetRequestHistory",
        "describeSpotFleetRequests",
        "describeSpotInstanceRequests",
        "describeSpotPriceHistory",
        "describeStaleSecurityGroups",
        "describeSubnets",
        "describeTags",
        "describeTrafficMirrorFilters",
        "describeTrafficMirrorSessions",
        "describeTrafficMirrorTargets",
        "describeTransitGatewayAttachments",
        "describeTransitGatewayMulticastDomains",
        "describeTransitGatewayPeeringAttachments",
        "describeTransitGatewayRouteTables",
        "describeTransitGatewayVpcAttachments",
        "describeTransitGateways",
        "describeVolumeAttribute",
        "describeVolumeStatus",
        "describeVolumes",
        "describeVolumesModifications",
        "describeVpcAttribute",
        "describeVpcClassicLink",
        "describeVpcClassicLinkDnsSupport",
        "describeVpcEndpointConnectionNotifications",
        "describeVpcEndpointConnections",
        "describeVpcEndpointServiceConfigurations",
        "describeVpcEndpointServicePermissions",
        "describeVpcEndpointServices",
        "describeVpcEndpoints",
        "describeVpcPeeringConnections",
        "describeVpcs",
        "describeVpnConnections",
        "describeVpnGateways",
        "detachClassicLinkVpc",
        "detachInternetGateway",
        "detachNetworkInterface",
        "detachVolume",
        "detachVpnGateway",
        "disableEbsEncryptionByDefault",
        "disableFastSnapshotRestores",
        "disableTransitGatewayRouteTablePropagation",
        "disableVgwRoutePropagation",
        "disableVpcClassicLink",
        "disableVpcClassicLinkDnsSupport",
        "disassociateAddress",
        "disassociateClientVpnTargetNetwork",
        "disassociateIamInstanceProfile",
        "disassociateRouteTable",
        "disassociateSubnetCidrBlock",
        "disassociateTransitGatewayMulticastDomain",
        "disassociateTransitGatewayRouteTable",
        "disassociateVpcCidrBlock",
        "enableEbsEncryptionByDefault",
        "enableFastSnapshotRestores",
        "enableTransitGatewayRouteTablePropagation",
        "enableVgwRoutePropagation",
        "enableVolumeIO",
        "enableVpcClassicLink",
        "enableVpcClassicLinkDnsSupport",
        "exportClientVpnClientCertificateRevocationList",
        "exportClientVpnClientConfiguration",
        "exportImage",
        "exportTransitGatewayRoutes",
        "getCapacityReservationUsage",
        "getCoipPoolUsage",
        "getConsoleOutput",
        "getConsoleScreenshot",
        "getDefaultCreditSpecification",
        "getEbsDefaultKmsKeyId",
        "getEbsEncryptionByDefault",
        "getHostReservationPurchasePreview",
        "getLaunchTemplateData",
        "getPasswordData",
        "getReservedInstancesExchangeQuote",
        "getTransitGatewayAttachmentPropagations",
        "getTransitGatewayMulticastDomainAssociations",
        "getTransitGatewayRouteTableAssociations",
        "getTransitGatewayRouteTablePropagations",
        "importClientVpnClientCertificateRevocationList",
        "importImage",
        "importInstance",
        "importKeyPair",
        "importSnapshot",
        "importVolume",
        "modifyCapacityReservation",
        "modifyClientVpnEndpoint",
        "modifyDefaultCreditSpecification",
        "modifyEbsDefaultKmsKeyId",
        "modifyFleet",
        "modifyFpgaImageAttribute",
        "modifyHosts",
        "modifyIdFormat",
        "modifyIdentityIdFormat",
        "modifyImageAttribute",
        "modifyInstanceAttribute",
        "modifyInstanceCapacityReservationAttributes",
        "modifyInstanceCreditSpecification",
        "modifyInstanceEventStartTime",
        "modifyInstanceMetadataOptions",
        "modifyInstancePlacement",
        "modifyLaunchTemplate",
        "modifyNetworkInterfaceAttribute",
        "modifyReservedInstances",
        "modifySnapshotAttribute",
        "modifySpotFleetRequest",
        "modifySubnetAttribute",
        "modifyTrafficMirrorFilterNetworkServices",
        "modifyTrafficMirrorFilterRule",
        "modifyTrafficMirrorSession",
        "modifyTransitGatewayVpcAttachment",
        "modifyVolume",
        "modifyVolumeAttribute",
        "modifyVpcAttribute",
        "modifyVpcEndpoint",
        "modifyVpcEndpointConnectionNotification",
        "modifyVpcEndpointServiceConfiguration",
        "modifyVpcEndpointServicePermissions",
        "modifyVpcPeeringConnectionOptions",
        "modifyVpcTenancy",
        "modifyVpnConnection",
        "modifyVpnTunnelCertificate",
        "modifyVpnTunnelOptions",
        "monitorInstances",
        "moveAddressToVpc",
        "provisionByoipCidr",
        "purchaseHostReservation",
        "purchaseReservedInstancesOffering",
        "purchaseScheduledInstances",
        "rebootInstances",
        "registerImage",
        "registerTransitGatewayMulticastGroupMembers",
        "registerTransitGatewayMulticastGroupSources",
        "rejectTransitGatewayPeeringAttachment",
        "rejectTransitGatewayVpcAttachment",
        "rejectVpcEndpointConnections",
        "rejectVpcPeeringConnection",
        "releaseAddress",
        "releaseHosts",
        "replaceIamInstanceProfileAssociation",
        "replaceNetworkAclAssociation",
        "replaceNetworkAclEntry",
        "replaceRoute",
        "replaceRouteTableAssociation",
        "replaceTransitGatewayRoute",
        "reportInstanceStatus",
        "requestSpotFleet",
        "requestSpotInstances",
        "resetEbsDefaultKmsKeyId",
        "resetFpgaImageAttribute",
        "resetImageAttribute",
        "resetInstanceAttribute",
        "resetNetworkInterfaceAttribute",
        "resetSnapshotAttribute",
        "restoreAddressToClassic",
        "revokeClientVpnIngress",
        "revokeSecurityGroupEgress",
        "revokeSecurityGroupIngress",
        "runInstances",
        "runScheduledInstances",
        "searchLocalGatewayRoutes",
        "searchTransitGatewayMulticastGroups",
        "searchTransitGatewayRoutes",
        "sendDiagnosticInterrupt",
        "startInstances",
        "stopInstances",
        "terminateClientVpnConnections",
        "terminateInstances",
        "unassignIpv6Addresses",
        "unassignPrivateIpAddresses",
        "unmonitorInstances",
        "updateSecurityGroupRuleDescriptionsEgress",
        "updateSecurityGroupRuleDescriptionsIngress",
        "withdrawByoipCidr"
      ]
    },
    ECR: {
      name: "ECR",
      methods: [
        "batchCheckLayerAvailability",
        "batchDeleteImage",
        "batchGetImage",
        "completeLayerUpload",
        "createRepository",
        "deleteLifecyclePolicy",
        "deleteRepository",
        "deleteRepositoryPolicy",
        "describeImageScanFindings",
        "describeImages",
        "describeRepositories",
        "getAuthorizationToken",
        "getDownloadUrlForLayer",
        "getLifecyclePolicy",
        "getLifecyclePolicyPreview",
        "getRepositoryPolicy",
        "initiateLayerUpload",
        "listImages",
        "listTagsForResource",
        "putImage",
        "putImageScanningConfiguration",
        "putImageTagMutability",
        "putLifecyclePolicy",
        "setRepositoryPolicy",
        "startImageScan",
        "startLifecyclePolicyPreview",
        "tagResource",
        "untagResource",
        "uploadLayerPart"
      ]
    },
    ECS: {
      name: "ECS",
      methods: [
        "createCapacityProvider",
        "createCluster",
        "createService",
        "createTaskSet",
        "deleteAccountSetting",
        "deleteAttributes",
        "deleteCluster",
        "deleteService",
        "deleteTaskSet",
        "deregisterContainerInstance",
        "deregisterTaskDefinition",
        "describeCapacityProviders",
        "describeClusters",
        "describeContainerInstances",
        "describeServices",
        "describeTaskDefinition",
        "describeTaskSets",
        "describeTasks",
        "discoverPollEndpoint",
        "listAccountSettings",
        "listAttributes",
        "listClusters",
        "listContainerInstances",
        "listServices",
        "listTagsForResource",
        "listTaskDefinitionFamilies",
        "listTaskDefinitions",
        "listTasks",
        "putAccountSetting",
        "putAccountSettingDefault",
        "putAttributes",
        "putClusterCapacityProviders",
        "registerContainerInstance",
        "registerTaskDefinition",
        "runTask",
        "startTask",
        "stopTask",
        "submitAttachmentStateChanges",
        "submitContainerStateChange",
        "submitTaskStateChange",
        "tagResource",
        "untagResource",
        "updateClusterSettings",
        "updateContainerAgent",
        "updateContainerInstancesState",
        "updateService",
        "updateServicePrimaryTaskSet",
        "updateTaskSet"
      ]
    },
    EFS: {
      name: "EFS",
      methods: [
        "createFileSystem",
        "createMountTarget",
        "createTags",
        "deleteFileSystem",
        "deleteMountTarget",
        "deleteTags",
        "describeFileSystems",
        "describeLifecycleConfiguration",
        "describeMountTargetSecurityGroups",
        "describeMountTargets",
        "describeTags",
        "modifyMountTargetSecurityGroups",
        "putLifecycleConfiguration",
        "updateFileSystem"
      ]
    },
    ElastiCache: {
      name: "ElastiCache",
      methods: [
        "addTagsToResource",
        "authorizeCacheSecurityGroupIngress",
        "batchApplyUpdateAction",
        "batchStopUpdateAction",
        "completeMigration",
        "copySnapshot",
        "createCacheCluster",
        "createCacheParameterGroup",
        "createCacheSecurityGroup",
        "createCacheSubnetGroup",
        "createReplicationGroup",
        "createSnapshot",
        "decreaseReplicaCount",
        "deleteCacheCluster",
        "deleteCacheParameterGroup",
        "deleteCacheSecurityGroup",
        "deleteCacheSubnetGroup",
        "deleteReplicationGroup",
        "deleteSnapshot",
        "describeCacheClusters",
        "describeCacheEngineVersions",
        "describeCacheParameterGroups",
        "describeCacheParameters",
        "describeCacheSecurityGroups",
        "describeCacheSubnetGroups",
        "describeEngineDefaultParameters",
        "describeEvents",
        "describeReplicationGroups",
        "describeReservedCacheNodes",
        "describeReservedCacheNodesOfferings",
        "describeServiceUpdates",
        "describeSnapshots",
        "describeUpdateActions",
        "increaseReplicaCount",
        "listAllowedNodeTypeModifications",
        "listTagsForResource",
        "modifyCacheCluster",
        "modifyCacheParameterGroup",
        "modifyCacheSubnetGroup",
        "modifyReplicationGroup",
        "modifyReplicationGroupShardConfiguration",
        "purchaseReservedCacheNodesOffering",
        "rebootCacheCluster",
        "removeTagsFromResource",
        "resetCacheParameterGroup",
        "revokeCacheSecurityGroupIngress",
        "startMigration",
        "testFailover"
      ]
    },
    ElasticBeanstalk: {
      name: "ElasticBeanstalk",
      methods: [
        "abortEnvironmentUpdate",
        "applyEnvironmentManagedAction",
        "checkDNSAvailability",
        "composeEnvironments",
        "createApplication",
        "createApplicationVersion",
        "createConfigurationTemplate",
        "createEnvironment",
        "createPlatformVersion",
        "createStorageLocation",
        "deleteApplication",
        "deleteApplicationVersion",
        "deleteConfigurationTemplate",
        "deleteEnvironmentConfiguration",
        "deletePlatformVersion",
        "describeAccountAttributes",
        "describeApplicationVersions",
        "describeApplications",
        "describeConfigurationOptions",
        "describeConfigurationSettings",
        "describeEnvironmentHealth",
        "describeEnvironmentManagedActionHistory",
        "describeEnvironmentManagedActions",
        "describeEnvironmentResources",
        "describeEnvironments",
        "describeEvents",
        "describeInstancesHealth",
        "describePlatformVersion",
        "listAvailableSolutionStacks",
        "listPlatformVersions",
        "listTagsForResource",
        "rebuildEnvironment",
        "requestEnvironmentInfo",
        "restartAppServer",
        "retrieveEnvironmentInfo",
        "swapEnvironmentCNAMEs",
        "terminateEnvironment",
        "updateApplication",
        "updateApplicationResourceLifecycle",
        "updateApplicationVersion",
        "updateConfigurationTemplate",
        "updateEnvironment",
        "updateTagsForResource",
        "validateConfigurationSettings"
      ]
    },
    ELB: {
      name: "ELB",
      methods: [
        "addTags",
        "applySecurityGroupsToLoadBalancer",
        "attachLoadBalancerToSubnets",
        "configureHealthCheck",
        "createAppCookieStickinessPolicy",
        "createLBCookieStickinessPolicy",
        "createLoadBalancer",
        "createLoadBalancerListeners",
        "createLoadBalancerPolicy",
        "deleteLoadBalancer",
        "deleteLoadBalancerListeners",
        "deleteLoadBalancerPolicy",
        "deregisterInstancesFromLoadBalancer",
        "describeAccountLimits",
        "describeInstanceHealth",
        "describeLoadBalancerAttributes",
        "describeLoadBalancerPolicies",
        "describeLoadBalancerPolicyTypes",
        "describeLoadBalancers",
        "describeTags",
        "detachLoadBalancerFromSubnets",
        "disableAvailabilityZonesForLoadBalancer",
        "enableAvailabilityZonesForLoadBalancer",
        "modifyLoadBalancerAttributes",
        "registerInstancesWithLoadBalancer",
        "removeTags",
        "setLoadBalancerListenerSSLCertificate",
        "setLoadBalancerPoliciesForBackendServer",
        "setLoadBalancerPoliciesOfListener"
      ]
    },
    ELBv2: {
      name: "ELBv2",
      methods: [
        "addListenerCertificates",
        "addTags",
        "createListener",
        "createLoadBalancer",
        "createRule",
        "createTargetGroup",
        "deleteListener",
        "deleteLoadBalancer",
        "deleteRule",
        "deleteTargetGroup",
        "deregisterTargets",
        "describeAccountLimits",
        "describeListenerCertificates",
        "describeListeners",
        "describeLoadBalancerAttributes",
        "describeLoadBalancers",
        "describeRules",
        "describeSSLPolicies",
        "describeTags",
        "describeTargetGroupAttributes",
        "describeTargetGroups",
        "describeTargetHealth",
        "modifyListener",
        "modifyLoadBalancerAttributes",
        "modifyRule",
        "modifyTargetGroup",
        "modifyTargetGroupAttributes",
        "registerTargets",
        "removeListenerCertificates",
        "removeTags",
        "setIpAddressType",
        "setRulePriorities",
        "setSecurityGroups",
        "setSubnets"
      ]
    },
    EMR: {
      name: "EMR",
      methods: [
        "addInstanceFleet",
        "addInstanceGroups",
        "addJobFlowSteps",
        "addTags",
        "cancelSteps",
        "createSecurityConfiguration",
        "deleteSecurityConfiguration",
        "describeCluster",
        "describeJobFlows",
        "describeSecurityConfiguration",
        "describeStep",
        "getBlockPublicAccessConfiguration",
        "listBootstrapActions",
        "listClusters",
        "listInstanceFleets",
        "listInstanceGroups",
        "listInstances",
        "listSecurityConfigurations",
        "listSteps",
        "modifyCluster",
        "modifyInstanceFleet",
        "modifyInstanceGroups",
        "putAutoScalingPolicy",
        "putBlockPublicAccessConfiguration",
        "removeAutoScalingPolicy",
        "removeTags",
        "runJobFlow",
        "setTerminationProtection",
        "setVisibleToAllUsers",
        "terminateJobFlows"
      ]
    },
    ES: {
      name: "ES",
      methods: [
        "addTags",
        "cancelElasticsearchServiceSoftwareUpdate",
        "createElasticsearchDomain",
        "deleteElasticsearchDomain",
        "deleteElasticsearchServiceRole",
        "describeElasticsearchDomain",
        "describeElasticsearchDomainConfig",
        "describeElasticsearchDomains",
        "describeElasticsearchInstanceTypeLimits",
        "describeReservedElasticsearchInstanceOfferings",
        "describeReservedElasticsearchInstances",
        "getCompatibleElasticsearchVersions",
        "getUpgradeHistory",
        "getUpgradeStatus",
        "listDomainNames",
        "listElasticsearchInstanceTypes",
        "listElasticsearchVersions",
        "listTags",
        "purchaseReservedElasticsearchInstanceOffering",
        "removeTags",
        "startElasticsearchServiceSoftwareUpdate",
        "updateElasticsearchDomainConfig",
        "upgradeElasticsearchDomain"
      ]
    },
    ElasticTranscoder: {
      name: "ElasticTranscoder",
      methods: [
        "cancelJob",
        "createJob",
        "createPipeline",
        "createPreset",
        "deletePipeline",
        "deletePreset",
        "listJobsByPipeline",
        "listJobsByStatus",
        "listPipelines",
        "listPresets",
        "readJob",
        "readPipeline",
        "readPreset",
        "testRole",
        "updatePipeline",
        "updatePipelineNotifications",
        "updatePipelineStatus"
      ]
    },
    Firehose: {
      name: "Firehose",
      methods: [
        "createDeliveryStream",
        "deleteDeliveryStream",
        "describeDeliveryStream",
        "listDeliveryStreams",
        "listTagsForDeliveryStream",
        "putRecord",
        "putRecordBatch",
        "startDeliveryStreamEncryption",
        "stopDeliveryStreamEncryption",
        "tagDeliveryStream",
        "untagDeliveryStream",
        "updateDestination"
      ]
    },
    GameLift: {
      name: "GameLift",
      methods: [
        "acceptMatch",
        "createAlias",
        "createBuild",
        "createFleet",
        "createGameSession",
        "createGameSessionQueue",
        "createMatchmakingConfiguration",
        "createMatchmakingRuleSet",
        "createPlayerSession",
        "createPlayerSessions",
        "createScript",
        "createVpcPeeringAuthorization",
        "createVpcPeeringConnection",
        "deleteAlias",
        "deleteBuild",
        "deleteFleet",
        "deleteGameSessionQueue",
        "deleteMatchmakingConfiguration",
        "deleteMatchmakingRuleSet",
        "deleteScalingPolicy",
        "deleteScript",
        "deleteVpcPeeringAuthorization",
        "deleteVpcPeeringConnection",
        "describeAlias",
        "describeBuild",
        "describeEC2InstanceLimits",
        "describeFleetAttributes",
        "describeFleetCapacity",
        "describeFleetEvents",
        "describeFleetPortSettings",
        "describeFleetUtilization",
        "describeGameSessionDetails",
        "describeGameSessionPlacement",
        "describeGameSessionQueues",
        "describeGameSessions",
        "describeInstances",
        "describeMatchmaking",
        "describeMatchmakingConfigurations",
        "describeMatchmakingRuleSets",
        "describePlayerSessions",
        "describeRuntimeConfiguration",
        "describeScalingPolicies",
        "describeScript",
        "describeVpcPeeringAuthorizations",
        "describeVpcPeeringConnections",
        "getGameSessionLogUrl",
        "getInstanceAccess",
        "listAliases",
        "listBuilds",
        "listFleets",
        "listScripts",
        "listTagsForResource",
        "putScalingPolicy",
        "requestUploadCredentials",
        "resolveAlias",
        "searchGameSessions",
        "startFleetActions",
        "startGameSessionPlacement",
        "startMatchBackfill",
        "startMatchmaking",
        "stopFleetActions",
        "stopGameSessionPlacement",
        "stopMatchmaking",
        "tagResource",
        "untagResource",
        "updateAlias",
        "updateBuild",
        "updateFleetAttributes",
        "updateFleetCapacity",
        "updateFleetPortSettings",
        "updateGameSession",
        "updateGameSessionQueue",
        "updateMatchmakingConfiguration",
        "updateRuntimeConfiguration",
        "updateScript",
        "validateMatchmakingRuleSet"
      ]
    },
    Glacier: {
      name: "Glacier",
      methods: [
        "abortMultipartUpload",
        "abortVaultLock",
        "addTagsToVault",
        "completeMultipartUpload",
        "completeVaultLock",
        "createVault",
        "deleteArchive",
        "deleteVault",
        "deleteVaultAccessPolicy",
        "deleteVaultNotifications",
        "describeJob",
        "describeVault",
        "getDataRetrievalPolicy",
        "getJobOutput",
        "getVaultAccessPolicy",
        "getVaultLock",
        "getVaultNotifications",
        "initiateJob",
        "initiateMultipartUpload",
        "initiateVaultLock",
        "listJobs",
        "listMultipartUploads",
        "listParts",
        "listProvisionedCapacity",
        "listTagsForVault",
        "listVaults",
        "purchaseProvisionedCapacity",
        "removeTagsFromVault",
        "setDataRetrievalPolicy",
        "setVaultAccessPolicy",
        "setVaultNotifications",
        "uploadArchive",
        "uploadMultipartPart"
      ]
    },
    Health: {
      name: "Health",
      methods: [
        "describeAffectedAccountsForOrganization",
        "describeAffectedEntities",
        "describeAffectedEntitiesForOrganization",
        "describeEntityAggregates",
        "describeEventAggregates",
        "describeEventDetails",
        "describeEventDetailsForOrganization",
        "describeEventTypes",
        "describeEvents",
        "describeEventsForOrganization",
        "describeHealthServiceStatusForOrganization",
        "disableHealthServiceAccessForOrganization",
        "enableHealthServiceAccessForOrganization"
      ]
    },
    IAM: {
      name: "IAM",
      methods: [
        "addClientIDToOpenIDConnectProvider",
        "addRoleToInstanceProfile",
        "addUserToGroup",
        "attachGroupPolicy",
        "attachRolePolicy",
        "attachUserPolicy",
        "changePassword",
        "createAccessKey",
        "createAccountAlias",
        "createGroup",
        "createInstanceProfile",
        "createLoginProfile",
        "createOpenIDConnectProvider",
        "createPolicy",
        "createPolicyVersion",
        "createRole",
        "createSAMLProvider",
        "createServiceLinkedRole",
        "createServiceSpecificCredential",
        "createUser",
        "createVirtualMFADevice",
        "deactivateMFADevice",
        "deleteAccessKey",
        "deleteAccountAlias",
        "deleteAccountPasswordPolicy",
        "deleteGroup",
        "deleteGroupPolicy",
        "deleteInstanceProfile",
        "deleteLoginProfile",
        "deleteOpenIDConnectProvider",
        "deletePolicy",
        "deletePolicyVersion",
        "deleteRole",
        "deleteRolePermissionsBoundary",
        "deleteRolePolicy",
        "deleteSAMLProvider",
        "deleteSSHPublicKey",
        "deleteServerCertificate",
        "deleteServiceLinkedRole",
        "deleteServiceSpecificCredential",
        "deleteSigningCertificate",
        "deleteUser",
        "deleteUserPermissionsBoundary",
        "deleteUserPolicy",
        "deleteVirtualMFADevice",
        "detachGroupPolicy",
        "detachRolePolicy",
        "detachUserPolicy",
        "enableMFADevice",
        "generateCredentialReport",
        "generateOrganizationsAccessReport",
        "generateServiceLastAccessedDetails",
        "getAccessKeyLastUsed",
        "getAccountAuthorizationDetails",
        "getAccountPasswordPolicy",
        "getAccountSummary",
        "getContextKeysForCustomPolicy",
        "getContextKeysForPrincipalPolicy",
        "getCredentialReport",
        "getGroup",
        "getGroupPolicy",
        "getInstanceProfile",
        "getLoginProfile",
        "getOpenIDConnectProvider",
        "getOrganizationsAccessReport",
        "getPolicy",
        "getPolicyVersion",
        "getRole",
        "getRolePolicy",
        "getSAMLProvider",
        "getSSHPublicKey",
        "getServerCertificate",
        "getServiceLastAccessedDetails",
        "getServiceLastAccessedDetailsWithEntities",
        "getServiceLinkedRoleDeletionStatus",
        "getUser",
        "getUserPolicy",
        "listAccessKeys",
        "listAccountAliases",
        "listAttachedGroupPolicies",
        "listAttachedRolePolicies",
        "listAttachedUserPolicies",
        "listEntitiesForPolicy",
        "listGroupPolicies",
        "listGroups",
        "listGroupsForUser",
        "listInstanceProfiles",
        "listInstanceProfilesForRole",
        "listMFADevices",
        "listOpenIDConnectProviders",
        "listPolicies",
        "listPoliciesGrantingServiceAccess",
        "listPolicyVersions",
        "listRolePolicies",
        "listRoleTags",
        "listRoles",
        "listSAMLProviders",
        "listSSHPublicKeys",
        "listServerCertificates",
        "listServiceSpecificCredentials",
        "listSigningCertificates",
        "listUserPolicies",
        "listUserTags",
        "listUsers",
        "listVirtualMFADevices",
        "putGroupPolicy",
        "putRolePermissionsBoundary",
        "putRolePolicy",
        "putUserPermissionsBoundary",
        "putUserPolicy",
        "removeClientIDFromOpenIDConnectProvider",
        "removeRoleFromInstanceProfile",
        "removeUserFromGroup",
        "resetServiceSpecificCredential",
        "resyncMFADevice",
        "setDefaultPolicyVersion",
        "setSecurityTokenServicePreferences",
        "simulateCustomPolicy",
        "simulatePrincipalPolicy",
        "tagRole",
        "tagUser",
        "untagRole",
        "untagUser",
        "updateAccessKey",
        "updateAccountPasswordPolicy",
        "updateAssumeRolePolicy",
        "updateGroup",
        "updateLoginProfile",
        "updateOpenIDConnectProviderThumbprint",
        "updateRole",
        "updateRoleDescription",
        "updateSAMLProvider",
        "updateSSHPublicKey",
        "updateServerCertificate",
        "updateServiceSpecificCredential",
        "updateSigningCertificate",
        "updateUser",
        "uploadSSHPublicKey",
        "uploadServerCertificate",
        "uploadSigningCertificate"
      ]
    },
    ImportExport: {
      name: "ImportExport",
      methods: [
        "cancelJob",
        "createJob",
        "getShippingLabel",
        "getStatus",
        "listJobs",
        "updateJob"
      ]
    },
    Inspector: {
      name: "Inspector",
      methods: [
        "addAttributesToFindings",
        "createAssessmentTarget",
        "createAssessmentTemplate",
        "createExclusionsPreview",
        "createResourceGroup",
        "deleteAssessmentRun",
        "deleteAssessmentTarget",
        "deleteAssessmentTemplate",
        "describeAssessmentRuns",
        "describeAssessmentTargets",
        "describeAssessmentTemplates",
        "describeCrossAccountAccessRole",
        "describeExclusions",
        "describeFindings",
        "describeResourceGroups",
        "describeRulesPackages",
        "getAssessmentReport",
        "getExclusionsPreview",
        "getTelemetryMetadata",
        "listAssessmentRunAgents",
        "listAssessmentRuns",
        "listAssessmentTargets",
        "listAssessmentTemplates",
        "listEventSubscriptions",
        "listExclusions",
        "listFindings",
        "listRulesPackages",
        "listTagsForResource",
        "previewAgents",
        "registerCrossAccountAccessRole",
        "removeAttributesFromFindings",
        "setTagsForResource",
        "startAssessmentRun",
        "stopAssessmentRun",
        "subscribeToEvent",
        "unsubscribeFromEvent",
        "updateAssessmentTarget"
      ]
    },
    Iot: {
      name: "Iot",
      methods: [
        "acceptCertificateTransfer",
        "addThingToBillingGroup",
        "addThingToThingGroup",
        "associateTargetsWithJob",
        "attachPolicy",
        "attachPrincipalPolicy",
        "attachSecurityProfile",
        "attachThingPrincipal",
        "cancelAuditMitigationActionsTask",
        "cancelAuditTask",
        "cancelCertificateTransfer",
        "cancelJob",
        "cancelJobExecution",
        "clearDefaultAuthorizer",
        "confirmTopicRuleDestination",
        "createAuthorizer",
        "createBillingGroup",
        "createCertificateFromCsr",
        "createDomainConfiguration",
        "createDynamicThingGroup",
        "createJob",
        "createKeysAndCertificate",
        "createMitigationAction",
        "createOTAUpdate",
        "createPolicy",
        "createPolicyVersion",
        "createProvisioningClaim",
        "createProvisioningTemplate",
        "createProvisioningTemplateVersion",
        "createRoleAlias",
        "createScheduledAudit",
        "createSecurityProfile",
        "createStream",
        "createThing",
        "createThingGroup",
        "createThingType",
        "createTopicRule",
        "createTopicRuleDestination",
        "deleteAccountAuditConfiguration",
        "deleteAuthorizer",
        "deleteBillingGroup",
        "deleteCACertificate",
        "deleteCertificate",
        "deleteDomainConfiguration",
        "deleteDynamicThingGroup",
        "deleteJob",
        "deleteJobExecution",
        "deleteMitigationAction",
        "deleteOTAUpdate",
        "deletePolicy",
        "deletePolicyVersion",
        "deleteProvisioningTemplate",
        "deleteProvisioningTemplateVersion",
        "deleteRegistrationCode",
        "deleteRoleAlias",
        "deleteScheduledAudit",
        "deleteSecurityProfile",
        "deleteStream",
        "deleteThing",
        "deleteThingGroup",
        "deleteThingType",
        "deleteTopicRule",
        "deleteTopicRuleDestination",
        "deleteV2LoggingLevel",
        "deprecateThingType",
        "describeAccountAuditConfiguration",
        "describeAuditFinding",
        "describeAuditMitigationActionsTask",
        "describeAuditTask",
        "describeAuthorizer",
        "describeBillingGroup",
        "describeCACertificate",
        "describeCertificate",
        "describeDefaultAuthorizer",
        "describeDomainConfiguration",
        "describeEndpoint",
        "describeEventConfigurations",
        "describeIndex",
        "describeJob",
        "describeJobExecution",
        "describeMitigationAction",
        "describeProvisioningTemplate",
        "describeProvisioningTemplateVersion",
        "describeRoleAlias",
        "describeScheduledAudit",
        "describeSecurityProfile",
        "describeStream",
        "describeThing",
        "describeThingGroup",
        "describeThingRegistrationTask",
        "describeThingType",
        "detachPolicy",
        "detachPrincipalPolicy",
        "detachSecurityProfile",
        "detachThingPrincipal",
        "disableTopicRule",
        "enableTopicRule",
        "getCardinality",
        "getEffectivePolicies",
        "getIndexingConfiguration",
        "getJobDocument",
        "getLoggingOptions",
        "getOTAUpdate",
        "getPercentiles",
        "getPolicy",
        "getPolicyVersion",
        "getRegistrationCode",
        "getStatistics",
        "getTopicRule",
        "getTopicRuleDestination",
        "getV2LoggingOptions",
        "listActiveViolations",
        "listAttachedPolicies",
        "listAuditFindings",
        "listAuditMitigationActionsExecutions",
        "listAuditMitigationActionsTasks",
        "listAuditTasks",
        "listAuthorizers",
        "listBillingGroups",
        "listCACertificates",
        "listCertificates",
        "listCertificatesByCA",
        "listDomainConfigurations",
        "listIndices",
        "listJobExecutionsForJob",
        "listJobExecutionsForThing",
        "listJobs",
        "listMitigationActions",
        "listOTAUpdates",
        "listOutgoingCertificates",
        "listPolicies",
        "listPolicyPrincipals",
        "listPolicyVersions",
        "listPrincipalPolicies",
        "listPrincipalThings",
        "listProvisioningTemplateVersions",
        "listProvisioningTemplates",
        "listRoleAliases",
        "listScheduledAudits",
        "listSecurityProfiles",
        "listSecurityProfilesForTarget",
        "listStreams",
        "listTagsForResource",
        "listTargetsForPolicy",
        "listTargetsForSecurityProfile",
        "listThingGroups",
        "listThingGroupsForThing",
        "listThingPrincipals",
        "listThingRegistrationTaskReports",
        "listThingRegistrationTasks",
        "listThingTypes",
        "listThings",
        "listThingsInBillingGroup",
        "listThingsInThingGroup",
        "listTopicRuleDestinations",
        "listTopicRules",
        "listV2LoggingLevels",
        "listViolationEvents",
        "registerCACertificate",
        "registerCertificate",
        "registerThing",
        "rejectCertificateTransfer",
        "removeThingFromBillingGroup",
        "removeThingFromThingGroup",
        "replaceTopicRule",
        "searchIndex",
        "setDefaultAuthorizer",
        "setDefaultPolicyVersion",
        "setLoggingOptions",
        "setV2LoggingLevel",
        "setV2LoggingOptions",
        "startAuditMitigationActionsTask",
        "startOnDemandAuditTask",
        "startThingRegistrationTask",
        "stopThingRegistrationTask",
        "tagResource",
        "testAuthorization",
        "testInvokeAuthorizer",
        "transferCertificate",
        "untagResource",
        "updateAccountAuditConfiguration",
        "updateAuthorizer",
        "updateBillingGroup",
        "updateCACertificate",
        "updateCertificate",
        "updateDomainConfiguration",
        "updateDynamicThingGroup",
        "updateEventConfigurations",
        "updateIndexingConfiguration",
        "updateJob",
        "updateMitigationAction",
        "updateProvisioningTemplate",
        "updateRoleAlias",
        "updateScheduledAudit",
        "updateSecurityProfile",
        "updateStream",
        "updateThing",
        "updateThingGroup",
        "updateThingGroupsForThing",
        "updateTopicRuleDestination",
        "validateSecurityProfileBehaviors"
      ]
    },
    IotData: {
      name: "IotData",
      methods: [
        "deleteThingShadow",
        "getThingShadow",
        "publish",
        "updateThingShadow"
      ]
    },
    Kinesis: {
      name: "Kinesis",
      methods: [
        "addTagsToStream",
        "createStream",
        "decreaseStreamRetentionPeriod",
        "deleteStream",
        "deregisterStreamConsumer",
        "describeLimits",
        "describeStream",
        "describeStreamConsumer",
        "describeStreamSummary",
        "disableEnhancedMonitoring",
        "enableEnhancedMonitoring",
        "getRecords",
        "getShardIterator",
        "increaseStreamRetentionPeriod",
        "listShards",
        "listStreamConsumers",
        "listStreams",
        "listTagsForStream",
        "mergeShards",
        "putRecord",
        "putRecords",
        "registerStreamConsumer",
        "removeTagsFromStream",
        "splitShard",
        "startStreamEncryption",
        "stopStreamEncryption",
        "updateShardCount"
      ]
    },
    KinesisAnalytics: {
      name: "KinesisAnalytics",
      methods: [
        "addApplicationCloudWatchLoggingOption",
        "addApplicationInput",
        "addApplicationInputProcessingConfiguration",
        "addApplicationOutput",
        "addApplicationReferenceDataSource",
        "createApplication",
        "deleteApplication",
        "deleteApplicationCloudWatchLoggingOption",
        "deleteApplicationInputProcessingConfiguration",
        "deleteApplicationOutput",
        "deleteApplicationReferenceDataSource",
        "describeApplication",
        "discoverInputSchema",
        "listApplications",
        "listTagsForResource",
        "startApplication",
        "stopApplication",
        "tagResource",
        "untagResource",
        "updateApplication"
      ]
    },
    KMS: {
      name: "KMS",
      methods: [
        "cancelKeyDeletion",
        "connectCustomKeyStore",
        "createAlias",
        "createCustomKeyStore",
        "createGrant",
        "createKey",
        "decrypt",
        "deleteAlias",
        "deleteCustomKeyStore",
        "deleteImportedKeyMaterial",
        "describeCustomKeyStores",
        "describeKey",
        "disableKey",
        "disableKeyRotation",
        "disconnectCustomKeyStore",
        "enableKey",
        "enableKeyRotation",
        "encrypt",
        "generateDataKey",
        "generateDataKeyPair",
        "generateDataKeyPairWithoutPlaintext",
        "generateDataKeyWithoutPlaintext",
        "generateRandom",
        "getKeyPolicy",
        "getKeyRotationStatus",
        "getParametersForImport",
        "getPublicKey",
        "importKeyMaterial",
        "listAliases",
        "listGrants",
        "listKeyPolicies",
        "listKeys",
        "listResourceTags",
        "listRetirableGrants",
        "putKeyPolicy",
        "reEncrypt",
        "retireGrant",
        "revokeGrant",
        "scheduleKeyDeletion",
        "sign",
        "tagResource",
        "untagResource",
        "updateAlias",
        "updateCustomKeyStore",
        "updateKeyDescription",
        "verify"
      ]
    },
    Lambda: {
      name: "Lambda",
      methods: [
        "addEventSource",
        "deleteFunction",
        "getEventSource",
        "getFunction",
        "getFunctionConfiguration",
        "invokeAsync",
        "listEventSources",
        "listFunctions",
        "removeEventSource",
        "updateFunctionConfiguration",
        "uploadFunction"
      ]
    },
    LexRuntime: {
      name: "LexRuntime",
      methods: [
        "deleteSession",
        "getSession",
        "postContent",
        "postText",
        "putSession"
      ]
    },
    Lightsail: {
      name: "Lightsail",
      methods: [
        "allocateStaticIp",
        "attachDisk",
        "attachInstancesToLoadBalancer",
        "attachLoadBalancerTlsCertificate",
        "attachStaticIp",
        "closeInstancePublicPorts",
        "copySnapshot",
        "createCloudFormationStack",
        "createDisk",
        "createDiskFromSnapshot",
        "createDiskSnapshot",
        "createDomain",
        "createDomainEntry",
        "createInstanceSnapshot",
        "createInstances",
        "createInstancesFromSnapshot",
        "createKeyPair",
        "createLoadBalancer",
        "createLoadBalancerTlsCertificate",
        "createRelationalDatabase",
        "createRelationalDatabaseFromSnapshot",
        "createRelationalDatabaseSnapshot",
        "deleteAutoSnapshot",
        "deleteDisk",
        "deleteDiskSnapshot",
        "deleteDomain",
        "deleteDomainEntry",
        "deleteInstance",
        "deleteInstanceSnapshot",
        "deleteKeyPair",
        "deleteKnownHostKeys",
        "deleteLoadBalancer",
        "deleteLoadBalancerTlsCertificate",
        "deleteRelationalDatabase",
        "deleteRelationalDatabaseSnapshot",
        "detachDisk",
        "detachInstancesFromLoadBalancer",
        "detachStaticIp",
        "disableAddOn",
        "downloadDefaultKeyPair",
        "enableAddOn",
        "exportSnapshot",
        "getActiveNames",
        "getAutoSnapshots",
        "getBlueprints",
        "getBundles",
        "getCloudFormationStackRecords",
        "getDisk",
        "getDiskSnapshot",
        "getDiskSnapshots",
        "getDisks",
        "getDomain",
        "getDomains",
        "getExportSnapshotRecords",
        "getInstance",
        "getInstanceAccessDetails",
        "getInstanceMetricData",
        "getInstancePortStates",
        "getInstanceSnapshot",
        "getInstanceSnapshots",
        "getInstanceState",
        "getInstances",
        "getKeyPair",
        "getKeyPairs",
        "getLoadBalancer",
        "getLoadBalancerMetricData",
        "getLoadBalancerTlsCertificates",
        "getLoadBalancers",
        "getOperation",
        "getOperations",
        "getOperationsForResource",
        "getRegions",
        "getRelationalDatabase",
        "getRelationalDatabaseBlueprints",
        "getRelationalDatabaseBundles",
        "getRelationalDatabaseEvents",
        "getRelationalDatabaseLogEvents",
        "getRelationalDatabaseLogStreams",
        "getRelationalDatabaseMasterUserPassword",
        "getRelationalDatabaseMetricData",
        "getRelationalDatabaseParameters",
        "getRelationalDatabaseSnapshot",
        "getRelationalDatabaseSnapshots",
        "getRelationalDatabases",
        "getStaticIp",
        "getStaticIps",
        "importKeyPair",
        "isVpcPeered",
        "openInstancePublicPorts",
        "peerVpc",
        "putInstancePublicPorts",
        "rebootInstance",
        "rebootRelationalDatabase",
        "releaseStaticIp",
        "startInstance",
        "startRelationalDatabase",
        "stopInstance",
        "stopRelationalDatabase",
        "tagResource",
        "unpeerVpc",
        "untagResource",
        "updateDomainEntry",
        "updateLoadBalancerAttribute",
        "updateRelationalDatabase",
        "updateRelationalDatabaseParameters"
      ]
    },
    MachineLearning: {
      name: "MachineLearning",
      methods: [
        "addTags",
        "createBatchPrediction",
        "createDataSourceFromRDS",
        "createDataSourceFromRedshift",
        "createDataSourceFromS3",
        "createEvaluation",
        "createMLModel",
        "createRealtimeEndpoint",
        "deleteBatchPrediction",
        "deleteDataSource",
        "deleteEvaluation",
        "deleteMLModel",
        "deleteRealtimeEndpoint",
        "deleteTags",
        "describeBatchPredictions",
        "describeDataSources",
        "describeEvaluations",
        "describeMLModels",
        "describeTags",
        "getBatchPrediction",
        "getDataSource",
        "getEvaluation",
        "getMLModel",
        "predict",
        "updateBatchPrediction",
        "updateDataSource",
        "updateEvaluation",
        "updateMLModel"
      ]
    },
    MarketplaceCommerceAnalytics: {
      name: "MarketplaceCommerceAnalytics",
      methods: ["generateDataSet", "startSupportDataExport"]
    },
    MarketplaceMetering: {
      name: "MarketplaceMetering",
      methods: [
        "batchMeterUsage",
        "meterUsage",
        "registerUsage",
        "resolveCustomer"
      ]
    },
    MTurk: {
      name: "MTurk",
      methods: [
        "acceptQualificationRequest",
        "approveAssignment",
        "associateQualificationWithWorker",
        "createAdditionalAssignmentsForHIT",
        "createHIT",
        "createHITType",
        "createHITWithHITType",
        "createQualificationType",
        "createWorkerBlock",
        "deleteHIT",
        "deleteQualificationType",
        "deleteWorkerBlock",
        "disassociateQualificationFromWorker",
        "getAccountBalance",
        "getAssignment",
        "getFileUploadURL",
        "getHIT",
        "getQualificationScore",
        "getQualificationType",
        "listAssignmentsForHIT",
        "listBonusPayments",
        "listHITs",
        "listHITsForQualificationType",
        "listQualificationRequests",
        "listQualificationTypes",
        "listReviewPolicyResultsForHIT",
        "listReviewableHITs",
        "listWorkerBlocks",
        "listWorkersWithQualificationType",
        "notifyWorkers",
        "rejectAssignment",
        "rejectQualificationRequest",
        "sendBonus",
        "sendTestEventNotification",
        "updateExpirationForHIT",
        "updateHITReviewStatus",
        "updateHITTypeOfHIT",
        "updateNotificationSettings",
        "updateQualificationType"
      ]
    },
    MobileAnalytics: { name: "MobileAnalytics", methods: ["putEvents"] },
    OpsWorks: {
      name: "OpsWorks",
      methods: [
        "assignInstance",
        "assignVolume",
        "associateElasticIp",
        "attachElasticLoadBalancer",
        "cloneStack",
        "createApp",
        "createDeployment",
        "createInstance",
        "createLayer",
        "createStack",
        "createUserProfile",
        "deleteApp",
        "deleteInstance",
        "deleteLayer",
        "deleteStack",
        "deleteUserProfile",
        "deregisterEcsCluster",
        "deregisterElasticIp",
        "deregisterInstance",
        "deregisterRdsDbInstance",
        "deregisterVolume",
        "describeAgentVersions",
        "describeApps",
        "describeCommands",
        "describeDeployments",
        "describeEcsClusters",
        "describeElasticIps",
        "describeElasticLoadBalancers",
        "describeInstances",
        "describeLayers",
        "describeLoadBasedAutoScaling",
        "describeMyUserProfile",
        "describeOperatingSystems",
        "describePermissions",
        "describeRaidArrays",
        "describeRdsDbInstances",
        "describeServiceErrors",
        "describeStackProvisioningParameters",
        "describeStackSummary",
        "describeStacks",
        "describeTimeBasedAutoScaling",
        "describeUserProfiles",
        "describeVolumes",
        "detachElasticLoadBalancer",
        "disassociateElasticIp",
        "getHostnameSuggestion",
        "grantAccess",
        "listTags",
        "rebootInstance",
        "registerEcsCluster",
        "registerElasticIp",
        "registerInstance",
        "registerRdsDbInstance",
        "registerVolume",
        "setLoadBasedAutoScaling",
        "setPermission",
        "setTimeBasedAutoScaling",
        "startInstance",
        "startStack",
        "stopInstance",
        "stopStack",
        "tagResource",
        "unassignInstance",
        "unassignVolume",
        "untagResource",
        "updateApp",
        "updateElasticIp",
        "updateInstance",
        "updateLayer",
        "updateMyUserProfile",
        "updateRdsDbInstance",
        "updateStack",
        "updateUserProfile",
        "updateVolume"
      ]
    },
    OpsWorksCM: {
      name: "OpsWorksCM",
      methods: [
        "associateNode",
        "createBackup",
        "createServer",
        "deleteBackup",
        "deleteServer",
        "describeAccountAttributes",
        "describeBackups",
        "describeEvents",
        "describeNodeAssociationStatus",
        "describeServers",
        "disassociateNode",
        "exportServerEngineAttribute",
        "listTagsForResource",
        "restoreServer",
        "startMaintenance",
        "tagResource",
        "untagResource",
        "updateServer",
        "updateServerEngineAttributes"
      ]
    },
    Organizations: {
      name: "Organizations",
      methods: [
        "acceptHandshake",
        "attachPolicy",
        "cancelHandshake",
        "createAccount",
        "createGovCloudAccount",
        "createOrganization",
        "createOrganizationalUnit",
        "createPolicy",
        "declineHandshake",
        "deleteOrganization",
        "deleteOrganizationalUnit",
        "deletePolicy",
        "describeAccount",
        "describeCreateAccountStatus",
        "describeEffectivePolicy",
        "describeHandshake",
        "describeOrganization",
        "describeOrganizationalUnit",
        "describePolicy",
        "detachPolicy",
        "disableAWSServiceAccess",
        "disablePolicyType",
        "enableAWSServiceAccess",
        "enableAllFeatures",
        "enablePolicyType",
        "inviteAccountToOrganization",
        "leaveOrganization",
        "listAWSServiceAccessForOrganization",
        "listAccounts",
        "listAccountsForParent",
        "listChildren",
        "listCreateAccountStatus",
        "listHandshakesForAccount",
        "listHandshakesForOrganization",
        "listOrganizationalUnitsForParent",
        "listParents",
        "listPolicies",
        "listPoliciesForTarget",
        "listRoots",
        "listTagsForResource",
        "listTargetsForPolicy",
        "moveAccount",
        "removeAccountFromOrganization",
        "tagResource",
        "untagResource",
        "updateOrganizationalUnit",
        "updatePolicy"
      ]
    },
    Pinpoint: {
      name: "Pinpoint",
      methods: [
        "createApp",
        "createCampaign",
        "createEmailTemplate",
        "createExportJob",
        "createImportJob",
        "createJourney",
        "createPushTemplate",
        "createSegment",
        "createSmsTemplate",
        "createVoiceTemplate",
        "deleteAdmChannel",
        "deleteApnsChannel",
        "deleteApnsSandboxChannel",
        "deleteApnsVoipChannel",
        "deleteApnsVoipSandboxChannel",
        "deleteApp",
        "deleteBaiduChannel",
        "deleteCampaign",
        "deleteEmailChannel",
        "deleteEmailTemplate",
        "deleteEndpoint",
        "deleteEventStream",
        "deleteGcmChannel",
        "deleteJourney",
        "deletePushTemplate",
        "deleteSegment",
        "deleteSmsChannel",
        "deleteSmsTemplate",
        "deleteUserEndpoints",
        "deleteVoiceChannel",
        "deleteVoiceTemplate",
        "getAdmChannel",
        "getApnsChannel",
        "getApnsSandboxChannel",
        "getApnsVoipChannel",
        "getApnsVoipSandboxChannel",
        "getApp",
        "getApplicationDateRangeKpi",
        "getApplicationSettings",
        "getApps",
        "getBaiduChannel",
        "getCampaign",
        "getCampaignActivities",
        "getCampaignDateRangeKpi",
        "getCampaignVersion",
        "getCampaignVersions",
        "getCampaigns",
        "getChannels",
        "getEmailChannel",
        "getEmailTemplate",
        "getEndpoint",
        "getEventStream",
        "getExportJob",
        "getExportJobs",
        "getGcmChannel",
        "getImportJob",
        "getImportJobs",
        "getJourney",
        "getJourneyDateRangeKpi",
        "getJourneyExecutionActivityMetrics",
        "getJourneyExecutionMetrics",
        "getPushTemplate",
        "getSegment",
        "getSegmentExportJobs",
        "getSegmentImportJobs",
        "getSegmentVersion",
        "getSegmentVersions",
        "getSegments",
        "getSmsChannel",
        "getSmsTemplate",
        "getUserEndpoints",
        "getVoiceChannel",
        "getVoiceTemplate",
        "listJourneys",
        "listTagsForResource",
        "listTemplateVersions",
        "listTemplates",
        "phoneNumberValidate",
        "putEventStream",
        "putEvents",
        "removeAttributes",
        "sendMessages",
        "sendUsersMessages",
        "tagResource",
        "untagResource",
        "updateAdmChannel",
        "updateApnsChannel",
        "updateApnsSandboxChannel",
        "updateApnsVoipChannel",
        "updateApnsVoipSandboxChannel",
        "updateApplicationSettings",
        "updateBaiduChannel",
        "updateCampaign",
        "updateEmailChannel",
        "updateEmailTemplate",
        "updateEndpoint",
        "updateEndpointsBatch",
        "updateGcmChannel",
        "updateJourney",
        "updateJourneyState",
        "updatePushTemplate",
        "updateSegment",
        "updateSmsChannel",
        "updateSmsTemplate",
        "updateTemplateActiveVersion",
        "updateVoiceChannel",
        "updateVoiceTemplate"
      ]
    },
    Polly: {
      name: "Polly",
      methods: [
        "deleteLexicon",
        "describeVoices",
        "getLexicon",
        "getSpeechSynthesisTask",
        "listLexicons",
        "listSpeechSynthesisTasks",
        "putLexicon",
        "startSpeechSynthesisTask",
        "synthesizeSpeech"
      ]
    },
    RDS: {
      name: "RDS",
      methods: [
        "addSourceIdentifierToSubscription",
        "addTagsToResource",
        "authorizeDBSecurityGroupIngress",
        "copyDBSnapshot",
        "createDBInstance",
        "createDBInstanceReadReplica",
        "createDBParameterGroup",
        "createDBSecurityGroup",
        "createDBSnapshot",
        "createDBSubnetGroup",
        "createEventSubscription",
        "createOptionGroup",
        "deleteDBInstance",
        "deleteDBParameterGroup",
        "deleteDBSecurityGroup",
        "deleteDBSnapshot",
        "deleteDBSubnetGroup",
        "deleteEventSubscription",
        "deleteOptionGroup",
        "describeDBEngineVersions",
        "describeDBInstances",
        "describeDBParameterGroups",
        "describeDBParameters",
        "describeDBSecurityGroups",
        "describeDBSnapshots",
        "describeDBSubnetGroups",
        "describeEngineDefaultParameters",
        "describeEventCategories",
        "describeEventSubscriptions",
        "describeEvents",
        "describeOptionGroupOptions",
        "describeOptionGroups",
        "describeOrderableDBInstanceOptions",
        "describeReservedDBInstances",
        "describeReservedDBInstancesOfferings",
        "listTagsForResource",
        "modifyDBInstance",
        "modifyDBParameterGroup",
        "modifyDBSubnetGroup",
        "modifyEventSubscription",
        "modifyOptionGroup",
        "promoteReadReplica",
        "purchaseReservedDBInstancesOffering",
        "rebootDBInstance",
        "removeSourceIdentifierFromSubscription",
        "removeTagsFromResource",
        "resetDBParameterGroup",
        "restoreDBInstanceFromDBSnapshot",
        "restoreDBInstanceToPointInTime",
        "revokeDBSecurityGroupIngress"
      ]
    },
    Redshift: {
      name: "Redshift",
      methods: [
        "acceptReservedNodeExchange",
        "authorizeClusterSecurityGroupIngress",
        "authorizeSnapshotAccess",
        "batchDeleteClusterSnapshots",
        "batchModifyClusterSnapshots",
        "cancelResize",
        "copyClusterSnapshot",
        "createCluster",
        "createClusterParameterGroup",
        "createClusterSecurityGroup",
        "createClusterSnapshot",
        "createClusterSubnetGroup",
        "createEventSubscription",
        "createHsmClientCertificate",
        "createHsmConfiguration",
        "createScheduledAction",
        "createSnapshotCopyGrant",
        "createSnapshotSchedule",
        "createTags",
        "deleteCluster",
        "deleteClusterParameterGroup",
        "deleteClusterSecurityGroup",
        "deleteClusterSnapshot",
        "deleteClusterSubnetGroup",
        "deleteEventSubscription",
        "deleteHsmClientCertificate",
        "deleteHsmConfiguration",
        "deleteScheduledAction",
        "deleteSnapshotCopyGrant",
        "deleteSnapshotSchedule",
        "deleteTags",
        "describeAccountAttributes",
        "describeClusterDbRevisions",
        "describeClusterParameterGroups",
        "describeClusterParameters",
        "describeClusterSecurityGroups",
        "describeClusterSnapshots",
        "describeClusterSubnetGroups",
        "describeClusterTracks",
        "describeClusterVersions",
        "describeClusters",
        "describeDefaultClusterParameters",
        "describeEventCategories",
        "describeEventSubscriptions",
        "describeEvents",
        "describeHsmClientCertificates",
        "describeHsmConfigurations",
        "describeLoggingStatus",
        "describeNodeConfigurationOptions",
        "describeOrderableClusterOptions",
        "describeReservedNodeOfferings",
        "describeReservedNodes",
        "describeResize",
        "describeScheduledActions",
        "describeSnapshotCopyGrants",
        "describeSnapshotSchedules",
        "describeStorage",
        "describeTableRestoreStatus",
        "describeTags",
        "disableLogging",
        "disableSnapshotCopy",
        "enableLogging",
        "enableSnapshotCopy",
        "getClusterCredentials",
        "getReservedNodeExchangeOfferings",
        "modifyCluster",
        "modifyClusterDbRevision",
        "modifyClusterIamRoles",
        "modifyClusterMaintenance",
        "modifyClusterParameterGroup",
        "modifyClusterSnapshot",
        "modifyClusterSnapshotSchedule",
        "modifyClusterSubnetGroup",
        "modifyEventSubscription",
        "modifyScheduledAction",
        "modifySnapshotCopyRetentionPeriod",
        "modifySnapshotSchedule",
        "purchaseReservedNodeOffering",
        "rebootCluster",
        "resetClusterParameterGroup",
        "resizeCluster",
        "restoreFromClusterSnapshot",
        "restoreTableFromClusterSnapshot",
        "revokeClusterSecurityGroupIngress",
        "revokeSnapshotAccess",
        "rotateEncryptionKey"
      ]
    },
    Rekognition: {
      name: "Rekognition",
      methods: [
        "compareFaces",
        "createCollection",
        "createProject",
        "createProjectVersion",
        "createStreamProcessor",
        "deleteCollection",
        "deleteFaces",
        "deleteStreamProcessor",
        "describeCollection",
        "describeProjectVersions",
        "describeProjects",
        "describeStreamProcessor",
        "detectCustomLabels",
        "detectFaces",
        "detectLabels",
        "detectModerationLabels",
        "detectText",
        "getCelebrityInfo",
        "getCelebrityRecognition",
        "getContentModeration",
        "getFaceDetection",
        "getFaceSearch",
        "getLabelDetection",
        "getPersonTracking",
        "indexFaces",
        "listCollections",
        "listFaces",
        "listStreamProcessors",
        "recognizeCelebrities",
        "searchFaces",
        "searchFacesByImage",
        "startCelebrityRecognition",
        "startContentModeration",
        "startFaceDetection",
        "startFaceSearch",
        "startLabelDetection",
        "startPersonTracking",
        "startProjectVersion",
        "startStreamProcessor",
        "stopProjectVersion",
        "stopStreamProcessor"
      ]
    },
    ResourceGroupsTaggingAPI: {
      name: "ResourceGroupsTaggingAPI",
      methods: [
        "describeReportCreation",
        "getComplianceSummary",
        "getResources",
        "getTagKeys",
        "getTagValues",
        "startReportCreation",
        "tagResources",
        "untagResources"
      ]
    },
    Route53: {
      name: "Route53",
      methods: [
        "associateVPCWithHostedZone",
        "changeResourceRecordSets",
        "changeTagsForResource",
        "createHealthCheck",
        "createHostedZone",
        "createQueryLoggingConfig",
        "createReusableDelegationSet",
        "createTrafficPolicy",
        "createTrafficPolicyInstance",
        "createTrafficPolicyVersion",
        "createVPCAssociationAuthorization",
        "deleteHealthCheck",
        "deleteHostedZone",
        "deleteQueryLoggingConfig",
        "deleteReusableDelegationSet",
        "deleteTrafficPolicy",
        "deleteTrafficPolicyInstance",
        "deleteVPCAssociationAuthorization",
        "disassociateVPCFromHostedZone",
        "getAccountLimit",
        "getChange",
        "getCheckerIpRanges",
        "getGeoLocation",
        "getHealthCheck",
        "getHealthCheckCount",
        "getHealthCheckLastFailureReason",
        "getHealthCheckStatus",
        "getHostedZone",
        "getHostedZoneCount",
        "getHostedZoneLimit",
        "getQueryLoggingConfig",
        "getReusableDelegationSet",
        "getReusableDelegationSetLimit",
        "getTrafficPolicy",
        "getTrafficPolicyInstance",
        "getTrafficPolicyInstanceCount",
        "listGeoLocations",
        "listHealthChecks",
        "listHostedZones",
        "listHostedZonesByName",
        "listQueryLoggingConfigs",
        "listResourceRecordSets",
        "listReusableDelegationSets",
        "listTagsForResource",
        "listTagsForResources",
        "listTrafficPolicies",
        "listTrafficPolicyInstances",
        "listTrafficPolicyInstancesByHostedZone",
        "listTrafficPolicyInstancesByPolicy",
        "listTrafficPolicyVersions",
        "listVPCAssociationAuthorizations",
        "testDNSAnswer",
        "updateHealthCheck",
        "updateHostedZoneComment",
        "updateTrafficPolicyComment",
        "updateTrafficPolicyInstance"
      ]
    },
    Route53Domains: {
      name: "Route53Domains",
      methods: [
        "checkDomainAvailability",
        "checkDomainTransferability",
        "deleteTagsForDomain",
        "disableDomainAutoRenew",
        "disableDomainTransferLock",
        "enableDomainAutoRenew",
        "enableDomainTransferLock",
        "getContactReachabilityStatus",
        "getDomainDetail",
        "getDomainSuggestions",
        "getOperationDetail",
        "listDomains",
        "listOperations",
        "listTagsForDomain",
        "registerDomain",
        "renewDomain",
        "resendContactReachabilityEmail",
        "retrieveDomainAuthCode",
        "transferDomain",
        "updateDomainContact",
        "updateDomainContactPrivacy",
        "updateDomainNameservers",
        "updateTagsForDomain",
        "viewBilling"
      ]
    },
    S3: {
      name: "S3",
      methods: [
        "abortMultipartUpload",
        "completeMultipartUpload",
        "copyObject",
        "createBucket",
        "createMultipartUpload",
        "deleteBucket",
        "deleteBucketAnalyticsConfiguration",
        "deleteBucketCors",
        "deleteBucketEncryption",
        "deleteBucketInventoryConfiguration",
        "deleteBucketLifecycle",
        "deleteBucketMetricsConfiguration",
        "deleteBucketPolicy",
        "deleteBucketReplication",
        "deleteBucketTagging",
        "deleteBucketWebsite",
        "deleteObject",
        "deleteObjectTagging",
        "deleteObjects",
        "deletePublicAccessBlock",
        "getBucketAccelerateConfiguration",
        "getBucketAcl",
        "getBucketAnalyticsConfiguration",
        "getBucketCors",
        "getBucketEncryption",
        "getBucketInventoryConfiguration",
        "getBucketLifecycle",
        "getBucketLifecycleConfiguration",
        "getBucketLocation",
        "getBucketLogging",
        "getBucketMetricsConfiguration",
        "getBucketNotification",
        "getBucketNotificationConfiguration",
        "getBucketPolicy",
        "getBucketPolicyStatus",
        "getBucketReplication",
        "getBucketRequestPayment",
        "getBucketTagging",
        "getBucketVersioning",
        "getBucketWebsite",
        "getObject",
        "getObjectAcl",
        "getObjectLegalHold",
        "getObjectLockConfiguration",
        "getObjectRetention",
        "getObjectTagging",
        "getObjectTorrent",
        "getPublicAccessBlock",
        "headBucket",
        "headObject",
        "listBucketAnalyticsConfigurations",
        "listBucketInventoryConfigurations",
        "listBucketMetricsConfigurations",
        "listBuckets",
        "listMultipartUploads",
        "listObjectVersions",
        "listObjects",
        "listObjectsV2",
        "listParts",
        "putBucketAccelerateConfiguration",
        "putBucketAcl",
        "putBucketAnalyticsConfiguration",
        "putBucketCors",
        "putBucketEncryption",
        "putBucketInventoryConfiguration",
        "putBucketLifecycle",
        "putBucketLifecycleConfiguration",
        "putBucketLogging",
        "putBucketMetricsConfiguration",
        "putBucketNotification",
        "putBucketNotificationConfiguration",
        "putBucketPolicy",
        "putBucketReplication",
        "putBucketRequestPayment",
        "putBucketTagging",
        "putBucketVersioning",
        "putBucketWebsite",
        "putObject",
        "putObjectAcl",
        "putObjectLegalHold",
        "putObjectLockConfiguration",
        "putObjectRetention",
        "putObjectTagging",
        "putPublicAccessBlock",
        "restoreObject",
        "selectObjectContent",
        "uploadPart",
        "uploadPartCopy"
      ]
    },
    S3Control: {
      name: "S3Control",
      methods: [
        "createAccessPoint",
        "createJob",
        "deleteAccessPoint",
        "deleteAccessPointPolicy",
        "deletePublicAccessBlock",
        "describeJob",
        "getAccessPoint",
        "getAccessPointPolicy",
        "getAccessPointPolicyStatus",
        "getPublicAccessBlock",
        "listAccessPoints",
        "listJobs",
        "putAccessPointPolicy",
        "putPublicAccessBlock",
        "updateJobPriority",
        "updateJobStatus"
      ]
    },
    ServiceCatalog: {
      name: "ServiceCatalog",
      methods: [
        "acceptPortfolioShare",
        "associateBudgetWithResource",
        "associatePrincipalWithPortfolio",
        "associateProductWithPortfolio",
        "associateServiceActionWithProvisioningArtifact",
        "associateTagOptionWithResource",
        "batchAssociateServiceActionWithProvisioningArtifact",
        "batchDisassociateServiceActionFromProvisioningArtifact",
        "copyProduct",
        "createConstraint",
        "createPortfolio",
        "createPortfolioShare",
        "createProduct",
        "createProvisionedProductPlan",
        "createProvisioningArtifact",
        "createServiceAction",
        "createTagOption",
        "deleteConstraint",
        "deletePortfolio",
        "deletePortfolioShare",
        "deleteProduct",
        "deleteProvisionedProductPlan",
        "deleteProvisioningArtifact",
        "deleteServiceAction",
        "deleteTagOption",
        "describeConstraint",
        "describeCopyProductStatus",
        "describePortfolio",
        "describePortfolioShareStatus",
        "describeProduct",
        "describeProductAsAdmin",
        "describeProductView",
        "describeProvisionedProduct",
        "describeProvisionedProductPlan",
        "describeProvisioningArtifact",
        "describeProvisioningParameters",
        "describeRecord",
        "describeServiceAction",
        "describeServiceActionExecutionParameters",
        "describeTagOption",
        "disableAWSOrganizationsAccess",
        "disassociateBudgetFromResource",
        "disassociatePrincipalFromPortfolio",
        "disassociateProductFromPortfolio",
        "disassociateServiceActionFromProvisioningArtifact",
        "disassociateTagOptionFromResource",
        "enableAWSOrganizationsAccess",
        "executeProvisionedProductPlan",
        "executeProvisionedProductServiceAction",
        "getAWSOrganizationsAccessStatus",
        "listAcceptedPortfolioShares",
        "listBudgetsForResource",
        "listConstraintsForPortfolio",
        "listLaunchPaths",
        "listOrganizationPortfolioAccess",
        "listPortfolioAccess",
        "listPortfolios",
        "listPortfoliosForProduct",
        "listPrincipalsForPortfolio",
        "listProvisionedProductPlans",
        "listProvisioningArtifacts",
        "listProvisioningArtifactsForServiceAction",
        "listRecordHistory",
        "listResourcesForTagOption",
        "listServiceActions",
        "listServiceActionsForProvisioningArtifact",
        "listStackInstancesForProvisionedProduct",
        "listTagOptions",
        "provisionProduct",
        "rejectPortfolioShare",
        "scanProvisionedProducts",
        "searchProducts",
        "searchProductsAsAdmin",
        "searchProvisionedProducts",
        "terminateProvisionedProduct",
        "updateConstraint",
        "updatePortfolio",
        "updateProduct",
        "updateProvisionedProduct",
        "updateProvisionedProductProperties",
        "updateProvisioningArtifact",
        "updateServiceAction",
        "updateTagOption"
      ]
    },
    SES: {
      name: "SES",
      methods: [
        "cloneReceiptRuleSet",
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createConfigurationSetTrackingOptions",
        "createCustomVerificationEmailTemplate",
        "createReceiptFilter",
        "createReceiptRule",
        "createReceiptRuleSet",
        "createTemplate",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "deleteConfigurationSetTrackingOptions",
        "deleteCustomVerificationEmailTemplate",
        "deleteIdentity",
        "deleteIdentityPolicy",
        "deleteReceiptFilter",
        "deleteReceiptRule",
        "deleteReceiptRuleSet",
        "deleteTemplate",
        "deleteVerifiedEmailAddress",
        "describeActiveReceiptRuleSet",
        "describeConfigurationSet",
        "describeReceiptRule",
        "describeReceiptRuleSet",
        "getAccountSendingEnabled",
        "getCustomVerificationEmailTemplate",
        "getIdentityDkimAttributes",
        "getIdentityMailFromDomainAttributes",
        "getIdentityNotificationAttributes",
        "getIdentityPolicies",
        "getIdentityVerificationAttributes",
        "getSendQuota",
        "getSendStatistics",
        "getTemplate",
        "listConfigurationSets",
        "listCustomVerificationEmailTemplates",
        "listIdentities",
        "listIdentityPolicies",
        "listReceiptFilters",
        "listReceiptRuleSets",
        "listTemplates",
        "listVerifiedEmailAddresses",
        "putConfigurationSetDeliveryOptions",
        "putIdentityPolicy",
        "reorderReceiptRuleSet",
        "sendBounce",
        "sendBulkTemplatedEmail",
        "sendCustomVerificationEmail",
        "sendEmail",
        "sendRawEmail",
        "sendTemplatedEmail",
        "setActiveReceiptRuleSet",
        "setIdentityDkimEnabled",
        "setIdentityFeedbackForwardingEnabled",
        "setIdentityHeadersInNotificationsEnabled",
        "setIdentityMailFromDomain",
        "setIdentityNotificationTopic",
        "setReceiptRulePosition",
        "testRenderTemplate",
        "updateAccountSendingEnabled",
        "updateConfigurationSetEventDestination",
        "updateConfigurationSetReputationMetricsEnabled",
        "updateConfigurationSetSendingEnabled",
        "updateConfigurationSetTrackingOptions",
        "updateCustomVerificationEmailTemplate",
        "updateReceiptRule",
        "updateTemplate",
        "verifyDomainDkim",
        "verifyDomainIdentity",
        "verifyEmailAddress",
        "verifyEmailIdentity"
      ]
    },
    Shield: {
      name: "Shield",
      methods: [
        "associateDRTLogBucket",
        "associateDRTRole",
        "createProtection",
        "createSubscription",
        "deleteProtection",
        "deleteSubscription",
        "describeAttack",
        "describeDRTAccess",
        "describeEmergencyContactSettings",
        "describeProtection",
        "describeSubscription",
        "disassociateDRTLogBucket",
        "disassociateDRTRole",
        "getSubscriptionState",
        "listAttacks",
        "listProtections",
        "updateEmergencyContactSettings",
        "updateSubscription"
      ]
    },
    SimpleDB: {
      name: "SimpleDB",
      methods: [
        "batchDeleteAttributes",
        "batchPutAttributes",
        "createDomain",
        "deleteAttributes",
        "deleteDomain",
        "domainMetadata",
        "getAttributes",
        "listDomains",
        "putAttributes",
        "select"
      ]
    },
    SMS: {
      name: "SMS",
      methods: [
        "createApp",
        "createReplicationJob",
        "deleteApp",
        "deleteAppLaunchConfiguration",
        "deleteAppReplicationConfiguration",
        "deleteReplicationJob",
        "deleteServerCatalog",
        "disassociateConnector",
        "generateChangeSet",
        "generateTemplate",
        "getApp",
        "getAppLaunchConfiguration",
        "getAppReplicationConfiguration",
        "getConnectors",
        "getReplicationJobs",
        "getReplicationRuns",
        "getServers",
        "importServerCatalog",
        "launchApp",
        "listApps",
        "putAppLaunchConfiguration",
        "putAppReplicationConfiguration",
        "startAppReplication",
        "startOnDemandReplicationRun",
        "stopAppReplication",
        "terminateApp",
        "updateApp",
        "updateReplicationJob"
      ]
    },
    Snowball: {
      name: "Snowball",
      methods: [
        "cancelCluster",
        "cancelJob",
        "createAddress",
        "createCluster",
        "createJob",
        "describeAddress",
        "describeAddresses",
        "describeCluster",
        "describeJob",
        "getJobManifest",
        "getJobUnlockCode",
        "getSnowballUsage",
        "getSoftwareUpdates",
        "listClusterJobs",
        "listClusters",
        "listCompatibleImages",
        "listJobs",
        "updateCluster",
        "updateJob"
      ]
    },
    SNS: {
      name: "SNS",
      methods: [
        "addPermission",
        "checkIfPhoneNumberIsOptedOut",
        "confirmSubscription",
        "createPlatformApplication",
        "createPlatformEndpoint",
        "createTopic",
        "deleteEndpoint",
        "deletePlatformApplication",
        "deleteTopic",
        "getEndpointAttributes",
        "getPlatformApplicationAttributes",
        "getSMSAttributes",
        "getSubscriptionAttributes",
        "getTopicAttributes",
        "listEndpointsByPlatformApplication",
        "listPhoneNumbersOptedOut",
        "listPlatformApplications",
        "listSubscriptions",
        "listSubscriptionsByTopic",
        "listTagsForResource",
        "listTopics",
        "optInPhoneNumber",
        "publish",
        "removePermission",
        "setEndpointAttributes",
        "setPlatformApplicationAttributes",
        "setSMSAttributes",
        "setSubscriptionAttributes",
        "setTopicAttributes",
        "subscribe",
        "tagResource",
        "unsubscribe",
        "untagResource"
      ]
    },
    SQS: {
      name: "SQS",
      methods: [
        "addPermission",
        "changeMessageVisibility",
        "changeMessageVisibilityBatch",
        "createQueue",
        "deleteMessage",
        "deleteMessageBatch",
        "deleteQueue",
        "getQueueAttributes",
        "getQueueUrl",
        "listDeadLetterSourceQueues",
        "listQueueTags",
        "listQueues",
        "purgeQueue",
        "receiveMessage",
        "removePermission",
        "sendMessage",
        "sendMessageBatch",
        "setQueueAttributes",
        "tagQueue",
        "untagQueue"
      ]
    },
    SSM: {
      name: "SSM",
      methods: [
        "addTagsToResource",
        "cancelCommand",
        "cancelMaintenanceWindowExecution",
        "createActivation",
        "createAssociation",
        "createAssociationBatch",
        "createDocument",
        "createMaintenanceWindow",
        "createOpsItem",
        "createPatchBaseline",
        "createResourceDataSync",
        "deleteActivation",
        "deleteAssociation",
        "deleteDocument",
        "deleteInventory",
        "deleteMaintenanceWindow",
        "deleteParameter",
        "deleteParameters",
        "deletePatchBaseline",
        "deleteResourceDataSync",
        "deregisterManagedInstance",
        "deregisterPatchBaselineForPatchGroup",
        "deregisterTargetFromMaintenanceWindow",
        "deregisterTaskFromMaintenanceWindow",
        "describeActivations",
        "describeAssociation",
        "describeAssociationExecutionTargets",
        "describeAssociationExecutions",
        "describeAutomationExecutions",
        "describeAutomationStepExecutions",
        "describeAvailablePatches",
        "describeDocument",
        "describeDocumentPermission",
        "describeEffectiveInstanceAssociations",
        "describeEffectivePatchesForPatchBaseline",
        "describeInstanceAssociationsStatus",
        "describeInstanceInformation",
        "describeInstancePatchStates",
        "describeInstancePatchStatesForPatchGroup",
        "describeInstancePatches",
        "describeInventoryDeletions",
        "describeMaintenanceWindowExecutionTaskInvocations",
        "describeMaintenanceWindowExecutionTasks",
        "describeMaintenanceWindowExecutions",
        "describeMaintenanceWindowSchedule",
        "describeMaintenanceWindowTargets",
        "describeMaintenanceWindowTasks",
        "describeMaintenanceWindows",
        "describeMaintenanceWindowsForTarget",
        "describeOpsItems",
        "describeParameters",
        "describePatchBaselines",
        "describePatchGroupState",
        "describePatchGroups",
        "describePatchProperties",
        "describeSessions",
        "getAutomationExecution",
        "getCalendarState",
        "getCommandInvocation",
        "getConnectionStatus",
        "getDefaultPatchBaseline",
        "getDeployablePatchSnapshotForInstance",
        "getDocument",
        "getInventory",
        "getInventorySchema",
        "getMaintenanceWindow",
        "getMaintenanceWindowExecution",
        "getMaintenanceWindowExecutionTask",
        "getMaintenanceWindowExecutionTaskInvocation",
        "getMaintenanceWindowTask",
        "getOpsItem",
        "getOpsSummary",
        "getParameter",
        "getParameterHistory",
        "getParameters",
        "getParametersByPath",
        "getPatchBaseline",
        "getPatchBaselineForPatchGroup",
        "getServiceSetting",
        "labelParameterVersion",
        "listAssociationVersions",
        "listAssociations",
        "listCommandInvocations",
        "listCommands",
        "listComplianceItems",
        "listComplianceSummaries",
        "listDocumentVersions",
        "listDocuments",
        "listInventoryEntries",
        "listResourceComplianceSummaries",
        "listResourceDataSync",
        "listTagsForResource",
        "modifyDocumentPermission",
        "putComplianceItems",
        "putInventory",
        "putParameter",
        "registerDefaultPatchBaseline",
        "registerPatchBaselineForPatchGroup",
        "registerTargetWithMaintenanceWindow",
        "registerTaskWithMaintenanceWindow",
        "removeTagsFromResource",
        "resetServiceSetting",
        "resumeSession",
        "sendAutomationSignal",
        "sendCommand",
        "startAssociationsOnce",
        "startAutomationExecution",
        "startSession",
        "stopAutomationExecution",
        "terminateSession",
        "updateAssociation",
        "updateAssociationStatus",
        "updateDocument",
        "updateDocumentDefaultVersion",
        "updateMaintenanceWindow",
        "updateMaintenanceWindowTarget",
        "updateMaintenanceWindowTask",
        "updateManagedInstanceRole",
        "updateOpsItem",
        "updatePatchBaseline",
        "updateResourceDataSync",
        "updateServiceSetting"
      ]
    },
    StorageGateway: {
      name: "StorageGateway",
      methods: [
        "activateGateway",
        "addCache",
        "addTagsToResource",
        "addUploadBuffer",
        "addWorkingStorage",
        "assignTapePool",
        "attachVolume",
        "cancelArchival",
        "cancelRetrieval",
        "createCachediSCSIVolume",
        "createNFSFileShare",
        "createSMBFileShare",
        "createSnapshot",
        "createSnapshotFromVolumeRecoveryPoint",
        "createStorediSCSIVolume",
        "createTapeWithBarcode",
        "createTapes",
        "deleteBandwidthRateLimit",
        "deleteChapCredentials",
        "deleteFileShare",
        "deleteGateway",
        "deleteSnapshotSchedule",
        "deleteTape",
        "deleteTapeArchive",
        "deleteVolume",
        "describeAvailabilityMonitorTest",
        "describeBandwidthRateLimit",
        "describeCache",
        "describeCachediSCSIVolumes",
        "describeChapCredentials",
        "describeGatewayInformation",
        "describeMaintenanceStartTime",
        "describeNFSFileShares",
        "describeSMBFileShares",
        "describeSMBSettings",
        "describeSnapshotSchedule",
        "describeStorediSCSIVolumes",
        "describeTapeArchives",
        "describeTapeRecoveryPoints",
        "describeTapes",
        "describeUploadBuffer",
        "describeVTLDevices",
        "describeWorkingStorage",
        "detachVolume",
        "disableGateway",
        "joinDomain",
        "listFileShares",
        "listGateways",
        "listLocalDisks",
        "listTagsForResource",
        "listTapes",
        "listVolumeInitiators",
        "listVolumeRecoveryPoints",
        "listVolumes",
        "notifyWhenUploaded",
        "refreshCache",
        "removeTagsFromResource",
        "resetCache",
        "retrieveTapeArchive",
        "retrieveTapeRecoveryPoint",
        "setLocalConsolePassword",
        "setSMBGuestPassword",
        "shutdownGateway",
        "startAvailabilityMonitorTest",
        "startGateway",
        "updateBandwidthRateLimit",
        "updateChapCredentials",
        "updateGatewayInformation",
        "updateGatewaySoftwareNow",
        "updateMaintenanceStartTime",
        "updateNFSFileShare",
        "updateSMBFileShare",
        "updateSMBSecurityStrategy",
        "updateSnapshotSchedule",
        "updateVTLDeviceType"
      ]
    },
    StepFunctions: {
      name: "StepFunctions",
      methods: [
        "createActivity",
        "createStateMachine",
        "deleteActivity",
        "deleteStateMachine",
        "describeActivity",
        "describeExecution",
        "describeStateMachine",
        "describeStateMachineForExecution",
        "getActivityTask",
        "getExecutionHistory",
        "listActivities",
        "listExecutions",
        "listStateMachines",
        "listTagsForResource",
        "sendTaskFailure",
        "sendTaskHeartbeat",
        "sendTaskSuccess",
        "startExecution",
        "stopExecution",
        "tagResource",
        "untagResource",
        "updateStateMachine"
      ]
    },
    STS: {
      name: "STS",
      methods: [
        "assumeRole",
        "assumeRoleWithSAML",
        "assumeRoleWithWebIdentity",
        "decodeAuthorizationMessage",
        "getAccessKeyInfo",
        "getCallerIdentity",
        "getFederationToken",
        "getSessionToken"
      ]
    },
    Support: {
      name: "Support",
      methods: [
        "addAttachmentsToSet",
        "addCommunicationToCase",
        "createCase",
        "describeAttachment",
        "describeCases",
        "describeCommunications",
        "describeServices",
        "describeSeverityLevels",
        "describeTrustedAdvisorCheckRefreshStatuses",
        "describeTrustedAdvisorCheckResult",
        "describeTrustedAdvisorCheckSummaries",
        "describeTrustedAdvisorChecks",
        "refreshTrustedAdvisorCheck",
        "resolveCase"
      ]
    },
    SWF: {
      name: "SWF",
      methods: [
        "countClosedWorkflowExecutions",
        "countOpenWorkflowExecutions",
        "countPendingActivityTasks",
        "countPendingDecisionTasks",
        "deprecateActivityType",
        "deprecateDomain",
        "deprecateWorkflowType",
        "describeActivityType",
        "describeDomain",
        "describeWorkflowExecution",
        "describeWorkflowType",
        "getWorkflowExecutionHistory",
        "listActivityTypes",
        "listClosedWorkflowExecutions",
        "listDomains",
        "listOpenWorkflowExecutions",
        "listTagsForResource",
        "listWorkflowTypes",
        "pollForActivityTask",
        "pollForDecisionTask",
        "recordActivityTaskHeartbeat",
        "registerActivityType",
        "registerDomain",
        "registerWorkflowType",
        "requestCancelWorkflowExecution",
        "respondActivityTaskCanceled",
        "respondActivityTaskCompleted",
        "respondActivityTaskFailed",
        "respondDecisionTaskCompleted",
        "signalWorkflowExecution",
        "startWorkflowExecution",
        "tagResource",
        "terminateWorkflowExecution",
        "undeprecateActivityType",
        "undeprecateDomain",
        "undeprecateWorkflowType",
        "untagResource"
      ]
    },
    XRay: {
      name: "XRay",
      methods: [
        "batchGetTraces",
        "createGroup",
        "createSamplingRule",
        "deleteGroup",
        "deleteSamplingRule",
        "getEncryptionConfig",
        "getGroup",
        "getGroups",
        "getSamplingRules",
        "getSamplingStatisticSummaries",
        "getSamplingTargets",
        "getServiceGraph",
        "getTimeSeriesServiceStatistics",
        "getTraceGraph",
        "getTraceSummaries",
        "putEncryptionConfig",
        "putTelemetryRecords",
        "putTraceSegments",
        "updateGroup",
        "updateSamplingRule"
      ]
    },
    WAF: {
      name: "WAF",
      methods: [
        "createByteMatchSet",
        "createGeoMatchSet",
        "createIPSet",
        "createRateBasedRule",
        "createRegexMatchSet",
        "createRegexPatternSet",
        "createRule",
        "createRuleGroup",
        "createSizeConstraintSet",
        "createSqlInjectionMatchSet",
        "createWebACL",
        "createXssMatchSet",
        "deleteByteMatchSet",
        "deleteGeoMatchSet",
        "deleteIPSet",
        "deleteLoggingConfiguration",
        "deletePermissionPolicy",
        "deleteRateBasedRule",
        "deleteRegexMatchSet",
        "deleteRegexPatternSet",
        "deleteRule",
        "deleteRuleGroup",
        "deleteSizeConstraintSet",
        "deleteSqlInjectionMatchSet",
        "deleteWebACL",
        "deleteXssMatchSet",
        "getByteMatchSet",
        "getChangeToken",
        "getChangeTokenStatus",
        "getGeoMatchSet",
        "getIPSet",
        "getLoggingConfiguration",
        "getPermissionPolicy",
        "getRateBasedRule",
        "getRateBasedRuleManagedKeys",
        "getRegexMatchSet",
        "getRegexPatternSet",
        "getRule",
        "getRuleGroup",
        "getSampledRequests",
        "getSizeConstraintSet",
        "getSqlInjectionMatchSet",
        "getWebACL",
        "getXssMatchSet",
        "listActivatedRulesInRuleGroup",
        "listByteMatchSets",
        "listGeoMatchSets",
        "listIPSets",
        "listLoggingConfigurations",
        "listRateBasedRules",
        "listRegexMatchSets",
        "listRegexPatternSets",
        "listRuleGroups",
        "listRules",
        "listSizeConstraintSets",
        "listSqlInjectionMatchSets",
        "listSubscribedRuleGroups",
        "listTagsForResource",
        "listWebACLs",
        "listXssMatchSets",
        "putLoggingConfiguration",
        "putPermissionPolicy",
        "tagResource",
        "untagResource",
        "updateByteMatchSet",
        "updateGeoMatchSet",
        "updateIPSet",
        "updateRateBasedRule",
        "updateRegexMatchSet",
        "updateRegexPatternSet",
        "updateRule",
        "updateRuleGroup",
        "updateSizeConstraintSet",
        "updateSqlInjectionMatchSet",
        "updateWebACL",
        "updateXssMatchSet"
      ]
    },
    WAFRegional: {
      name: "WAFRegional",
      methods: [
        "associateWebACL",
        "createByteMatchSet",
        "createGeoMatchSet",
        "createIPSet",
        "createRateBasedRule",
        "createRegexMatchSet",
        "createRegexPatternSet",
        "createRule",
        "createRuleGroup",
        "createSizeConstraintSet",
        "createSqlInjectionMatchSet",
        "createWebACL",
        "createXssMatchSet",
        "deleteByteMatchSet",
        "deleteGeoMatchSet",
        "deleteIPSet",
        "deleteLoggingConfiguration",
        "deletePermissionPolicy",
        "deleteRateBasedRule",
        "deleteRegexMatchSet",
        "deleteRegexPatternSet",
        "deleteRule",
        "deleteRuleGroup",
        "deleteSizeConstraintSet",
        "deleteSqlInjectionMatchSet",
        "deleteWebACL",
        "deleteXssMatchSet",
        "disassociateWebACL",
        "getByteMatchSet",
        "getChangeToken",
        "getChangeTokenStatus",
        "getGeoMatchSet",
        "getIPSet",
        "getLoggingConfiguration",
        "getPermissionPolicy",
        "getRateBasedRule",
        "getRateBasedRuleManagedKeys",
        "getRegexMatchSet",
        "getRegexPatternSet",
        "getRule",
        "getRuleGroup",
        "getSampledRequests",
        "getSizeConstraintSet",
        "getSqlInjectionMatchSet",
        "getWebACL",
        "getWebACLForResource",
        "getXssMatchSet",
        "listActivatedRulesInRuleGroup",
        "listByteMatchSets",
        "listGeoMatchSets",
        "listIPSets",
        "listLoggingConfigurations",
        "listRateBasedRules",
        "listRegexMatchSets",
        "listRegexPatternSets",
        "listResourcesForWebACL",
        "listRuleGroups",
        "listRules",
        "listSizeConstraintSets",
        "listSqlInjectionMatchSets",
        "listSubscribedRuleGroups",
        "listTagsForResource",
        "listWebACLs",
        "listXssMatchSets",
        "putLoggingConfiguration",
        "putPermissionPolicy",
        "tagResource",
        "untagResource",
        "updateByteMatchSet",
        "updateGeoMatchSet",
        "updateIPSet",
        "updateRateBasedRule",
        "updateRegexMatchSet",
        "updateRegexPatternSet",
        "updateRule",
        "updateRuleGroup",
        "updateSizeConstraintSet",
        "updateSqlInjectionMatchSet",
        "updateWebACL",
        "updateXssMatchSet"
      ]
    },
    WorkDocs: {
      name: "WorkDocs",
      methods: [
        "abortDocumentVersionUpload",
        "activateUser",
        "addResourcePermissions",
        "createComment",
        "createCustomMetadata",
        "createFolder",
        "createLabels",
        "createNotificationSubscription",
        "createUser",
        "deactivateUser",
        "deleteComment",
        "deleteCustomMetadata",
        "deleteDocument",
        "deleteFolder",
        "deleteFolderContents",
        "deleteLabels",
        "deleteNotificationSubscription",
        "deleteUser",
        "describeActivities",
        "describeComments",
        "describeDocumentVersions",
        "describeFolderContents",
        "describeGroups",
        "describeNotificationSubscriptions",
        "describeResourcePermissions",
        "describeRootFolders",
        "describeUsers",
        "getCurrentUser",
        "getDocument",
        "getDocumentPath",
        "getDocumentVersion",
        "getFolder",
        "getFolderPath",
        "getResources",
        "initiateDocumentVersionUpload",
        "removeAllResourcePermissions",
        "removeResourcePermission",
        "updateDocument",
        "updateDocumentVersion",
        "updateFolder",
        "updateUser"
      ]
    },
    WorkSpaces: {
      name: "WorkSpaces",
      methods: [
        "associateIpGroups",
        "authorizeIpRules",
        "copyWorkspaceImage",
        "createIpGroup",
        "createTags",
        "createWorkspaces",
        "deleteIpGroup",
        "deleteTags",
        "deleteWorkspaceImage",
        "deregisterWorkspaceDirectory",
        "describeAccount",
        "describeAccountModifications",
        "describeClientProperties",
        "describeIpGroups",
        "describeTags",
        "describeWorkspaceBundles",
        "describeWorkspaceDirectories",
        "describeWorkspaceImages",
        "describeWorkspaceSnapshots",
        "describeWorkspaces",
        "describeWorkspacesConnectionStatus",
        "disassociateIpGroups",
        "importWorkspaceImage",
        "listAvailableManagementCidrRanges",
        "modifyAccount",
        "modifyClientProperties",
        "modifySelfservicePermissions",
        "modifyWorkspaceAccessProperties",
        "modifyWorkspaceCreationProperties",
        "modifyWorkspaceProperties",
        "modifyWorkspaceState",
        "rebootWorkspaces",
        "rebuildWorkspaces",
        "registerWorkspaceDirectory",
        "restoreWorkspace",
        "revokeIpRules",
        "startWorkspaces",
        "stopWorkspaces",
        "terminateWorkspaces",
        "updateRulesOfIpGroup"
      ]
    },
    CodeStar: {
      name: "CodeStar",
      methods: [
        "associateTeamMember",
        "createProject",
        "createUserProfile",
        "deleteProject",
        "deleteUserProfile",
        "describeProject",
        "describeUserProfile",
        "disassociateTeamMember",
        "listProjects",
        "listResources",
        "listTagsForProject",
        "listTeamMembers",
        "listUserProfiles",
        "tagProject",
        "untagProject",
        "updateProject",
        "updateTeamMember",
        "updateUserProfile"
      ]
    },
    LexModelBuildingService: {
      name: "LexModelBuildingService",
      methods: [
        "createBotVersion",
        "createIntentVersion",
        "createSlotTypeVersion",
        "deleteBot",
        "deleteBotAlias",
        "deleteBotChannelAssociation",
        "deleteBotVersion",
        "deleteIntent",
        "deleteIntentVersion",
        "deleteSlotType",
        "deleteSlotTypeVersion",
        "deleteUtterances",
        "getBot",
        "getBotAlias",
        "getBotAliases",
        "getBotChannelAssociation",
        "getBotChannelAssociations",
        "getBotVersions",
        "getBots",
        "getBuiltinIntent",
        "getBuiltinIntents",
        "getBuiltinSlotTypes",
        "getExport",
        "getImport",
        "getIntent",
        "getIntentVersions",
        "getIntents",
        "getSlotType",
        "getSlotTypeVersions",
        "getSlotTypes",
        "getUtterancesView",
        "putBot",
        "putBotAlias",
        "putIntent",
        "putSlotType",
        "startImport"
      ]
    },
    MarketplaceEntitlementService: {
      name: "MarketplaceEntitlementService",
      methods: ["getEntitlements"]
    },
    Athena: {
      name: "Athena",
      methods: [
        "batchGetNamedQuery",
        "batchGetQueryExecution",
        "createNamedQuery",
        "createWorkGroup",
        "deleteNamedQuery",
        "deleteWorkGroup",
        "getNamedQuery",
        "getQueryExecution",
        "getQueryResults",
        "getWorkGroup",
        "listNamedQueries",
        "listQueryExecutions",
        "listTagsForResource",
        "listWorkGroups",
        "startQueryExecution",
        "stopQueryExecution",
        "tagResource",
        "untagResource",
        "updateWorkGroup"
      ]
    },
    Greengrass: {
      name: "Greengrass",
      methods: [
        "associateRoleToGroup",
        "associateServiceRoleToAccount",
        "createConnectorDefinition",
        "createConnectorDefinitionVersion",
        "createCoreDefinition",
        "createCoreDefinitionVersion",
        "createDeployment",
        "createDeviceDefinition",
        "createDeviceDefinitionVersion",
        "createFunctionDefinition",
        "createFunctionDefinitionVersion",
        "createGroup",
        "createGroupCertificateAuthority",
        "createGroupVersion",
        "createLoggerDefinition",
        "createLoggerDefinitionVersion",
        "createResourceDefinition",
        "createResourceDefinitionVersion",
        "createSoftwareUpdateJob",
        "createSubscriptionDefinition",
        "createSubscriptionDefinitionVersion",
        "deleteConnectorDefinition",
        "deleteCoreDefinition",
        "deleteDeviceDefinition",
        "deleteFunctionDefinition",
        "deleteGroup",
        "deleteLoggerDefinition",
        "deleteResourceDefinition",
        "deleteSubscriptionDefinition",
        "disassociateRoleFromGroup",
        "disassociateServiceRoleFromAccount",
        "getAssociatedRole",
        "getBulkDeploymentStatus",
        "getConnectivityInfo",
        "getConnectorDefinition",
        "getConnectorDefinitionVersion",
        "getCoreDefinition",
        "getCoreDefinitionVersion",
        "getDeploymentStatus",
        "getDeviceDefinition",
        "getDeviceDefinitionVersion",
        "getFunctionDefinition",
        "getFunctionDefinitionVersion",
        "getGroup",
        "getGroupCertificateAuthority",
        "getGroupCertificateConfiguration",
        "getGroupVersion",
        "getLoggerDefinition",
        "getLoggerDefinitionVersion",
        "getResourceDefinition",
        "getResourceDefinitionVersion",
        "getServiceRoleForAccount",
        "getSubscriptionDefinition",
        "getSubscriptionDefinitionVersion",
        "listBulkDeploymentDetailedReports",
        "listBulkDeployments",
        "listConnectorDefinitionVersions",
        "listConnectorDefinitions",
        "listCoreDefinitionVersions",
        "listCoreDefinitions",
        "listDeployments",
        "listDeviceDefinitionVersions",
        "listDeviceDefinitions",
        "listFunctionDefinitionVersions",
        "listFunctionDefinitions",
        "listGroupCertificateAuthorities",
        "listGroupVersions",
        "listGroups",
        "listLoggerDefinitionVersions",
        "listLoggerDefinitions",
        "listResourceDefinitionVersions",
        "listResourceDefinitions",
        "listSubscriptionDefinitionVersions",
        "listSubscriptionDefinitions",
        "listTagsForResource",
        "resetDeployments",
        "startBulkDeployment",
        "stopBulkDeployment",
        "tagResource",
        "untagResource",
        "updateConnectivityInfo",
        "updateConnectorDefinition",
        "updateCoreDefinition",
        "updateDeviceDefinition",
        "updateFunctionDefinition",
        "updateGroup",
        "updateGroupCertificateConfiguration",
        "updateLoggerDefinition",
        "updateResourceDefinition",
        "updateSubscriptionDefinition"
      ]
    },
    DAX: {
      name: "DAX",
      methods: [
        "createCluster",
        "createParameterGroup",
        "createSubnetGroup",
        "decreaseReplicationFactor",
        "deleteCluster",
        "deleteParameterGroup",
        "deleteSubnetGroup",
        "describeClusters",
        "describeDefaultParameters",
        "describeEvents",
        "describeParameterGroups",
        "describeParameters",
        "describeSubnetGroups",
        "increaseReplicationFactor",
        "listTags",
        "rebootNode",
        "tagResource",
        "untagResource",
        "updateCluster",
        "updateParameterGroup",
        "updateSubnetGroup"
      ]
    },
    MigrationHub: {
      name: "MigrationHub",
      methods: [
        "associateCreatedArtifact",
        "associateDiscoveredResource",
        "createProgressUpdateStream",
        "deleteProgressUpdateStream",
        "describeApplicationState",
        "describeMigrationTask",
        "disassociateCreatedArtifact",
        "disassociateDiscoveredResource",
        "importMigrationTask",
        "listCreatedArtifacts",
        "listDiscoveredResources",
        "listMigrationTasks",
        "listProgressUpdateStreams",
        "notifyApplicationState",
        "notifyMigrationTaskState",
        "putResourceAttributes"
      ]
    },
    CloudHSMV2: {
      name: "CloudHSMV2",
      methods: [
        "copyBackupToRegion",
        "createCluster",
        "createHsm",
        "deleteBackup",
        "deleteCluster",
        "deleteHsm",
        "describeBackups",
        "describeClusters",
        "initializeCluster",
        "listTags",
        "restoreBackup",
        "tagResource",
        "untagResource"
      ]
    },
    Glue: {
      name: "Glue",
      methods: [
        "batchCreatePartition",
        "batchDeleteConnection",
        "batchDeletePartition",
        "batchDeleteTable",
        "batchDeleteTableVersion",
        "batchGetCrawlers",
        "batchGetDevEndpoints",
        "batchGetJobs",
        "batchGetPartition",
        "batchGetTriggers",
        "batchGetWorkflows",
        "batchStopJobRun",
        "cancelMLTaskRun",
        "createClassifier",
        "createConnection",
        "createCrawler",
        "createDatabase",
        "createDevEndpoint",
        "createJob",
        "createMLTransform",
        "createPartition",
        "createScript",
        "createSecurityConfiguration",
        "createTable",
        "createTrigger",
        "createUserDefinedFunction",
        "createWorkflow",
        "deleteClassifier",
        "deleteConnection",
        "deleteCrawler",
        "deleteDatabase",
        "deleteDevEndpoint",
        "deleteJob",
        "deleteMLTransform",
        "deletePartition",
        "deleteResourcePolicy",
        "deleteSecurityConfiguration",
        "deleteTable",
        "deleteTableVersion",
        "deleteTrigger",
        "deleteUserDefinedFunction",
        "deleteWorkflow",
        "getCatalogImportStatus",
        "getClassifier",
        "getClassifiers",
        "getConnection",
        "getConnections",
        "getCrawler",
        "getCrawlerMetrics",
        "getCrawlers",
        "getDataCatalogEncryptionSettings",
        "getDatabase",
        "getDatabases",
        "getDataflowGraph",
        "getDevEndpoint",
        "getDevEndpoints",
        "getJob",
        "getJobBookmark",
        "getJobRun",
        "getJobRuns",
        "getJobs",
        "getMLTaskRun",
        "getMLTaskRuns",
        "getMLTransform",
        "getMLTransforms",
        "getMapping",
        "getPartition",
        "getPartitions",
        "getPlan",
        "getResourcePolicy",
        "getSecurityConfiguration",
        "getSecurityConfigurations",
        "getTable",
        "getTableVersion",
        "getTableVersions",
        "getTables",
        "getTags",
        "getTrigger",
        "getTriggers",
        "getUserDefinedFunction",
        "getUserDefinedFunctions",
        "getWorkflow",
        "getWorkflowRun",
        "getWorkflowRunProperties",
        "getWorkflowRuns",
        "importCatalogToGlue",
        "listCrawlers",
        "listDevEndpoints",
        "listJobs",
        "listTriggers",
        "listWorkflows",
        "putDataCatalogEncryptionSettings",
        "putResourcePolicy",
        "putWorkflowRunProperties",
        "resetJobBookmark",
        "searchTables",
        "startCrawler",
        "startCrawlerSchedule",
        "startExportLabelsTaskRun",
        "startImportLabelsTaskRun",
        "startJobRun",
        "startMLEvaluationTaskRun",
        "startMLLabelingSetGenerationTaskRun",
        "startTrigger",
        "startWorkflowRun",
        "stopCrawler",
        "stopCrawlerSchedule",
        "stopTrigger",
        "tagResource",
        "untagResource",
        "updateClassifier",
        "updateConnection",
        "updateCrawler",
        "updateCrawlerSchedule",
        "updateDatabase",
        "updateDevEndpoint",
        "updateJob",
        "updateMLTransform",
        "updatePartition",
        "updateTable",
        "updateTrigger",
        "updateUserDefinedFunction",
        "updateWorkflow"
      ]
    },
    Mobile: {
      name: "Mobile",
      methods: [
        "createProject",
        "deleteProject",
        "describeBundle",
        "describeProject",
        "exportBundle",
        "exportProject",
        "listBundles",
        "listProjects",
        "updateProject"
      ]
    },
    Pricing: {
      name: "Pricing",
      methods: ["describeServices", "getAttributeValues", "getProducts"]
    },
    CostExplorer: {
      name: "CostExplorer",
      methods: [
        "createCostCategoryDefinition",
        "deleteCostCategoryDefinition",
        "describeCostCategoryDefinition",
        "getCostAndUsage",
        "getCostAndUsageWithResources",
        "getCostForecast",
        "getDimensionValues",
        "getReservationCoverage",
        "getReservationPurchaseRecommendation",
        "getReservationUtilization",
        "getRightsizingRecommendation",
        "getSavingsPlansCoverage",
        "getSavingsPlansPurchaseRecommendation",
        "getSavingsPlansUtilization",
        "getSavingsPlansUtilizationDetails",
        "getTags",
        "getUsageForecast",
        "listCostCategoryDefinitions",
        "updateCostCategoryDefinition"
      ]
    },
    MediaConvert: {
      name: "MediaConvert",
      methods: [
        "associateCertificate",
        "cancelJob",
        "createJob",
        "createJobTemplate",
        "createPreset",
        "createQueue",
        "deleteJobTemplate",
        "deletePreset",
        "deleteQueue",
        "describeEndpoints",
        "disassociateCertificate",
        "getJob",
        "getJobTemplate",
        "getPreset",
        "getQueue",
        "listJobTemplates",
        "listJobs",
        "listPresets",
        "listQueues",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateJobTemplate",
        "updatePreset",
        "updateQueue"
      ]
    },
    MediaLive: {
      name: "MediaLive",
      methods: [
        "batchUpdateSchedule",
        "createChannel",
        "createInput",
        "createInputSecurityGroup",
        "createMultiplex",
        "createMultiplexProgram",
        "createTags",
        "deleteChannel",
        "deleteInput",
        "deleteInputSecurityGroup",
        "deleteMultiplex",
        "deleteMultiplexProgram",
        "deleteReservation",
        "deleteSchedule",
        "deleteTags",
        "describeChannel",
        "describeInput",
        "describeInputSecurityGroup",
        "describeMultiplex",
        "describeMultiplexProgram",
        "describeOffering",
        "describeReservation",
        "describeSchedule",
        "listChannels",
        "listInputSecurityGroups",
        "listInputs",
        "listMultiplexPrograms",
        "listMultiplexes",
        "listOfferings",
        "listReservations",
        "listTagsForResource",
        "purchaseOffering",
        "startChannel",
        "startMultiplex",
        "stopChannel",
        "stopMultiplex",
        "updateChannel",
        "updateChannelClass",
        "updateInput",
        "updateInputSecurityGroup",
        "updateMultiplex",
        "updateMultiplexProgram",
        "updateReservation"
      ]
    },
    MediaPackage: {
      name: "MediaPackage",
      methods: [
        "createChannel",
        "createHarvestJob",
        "createOriginEndpoint",
        "deleteChannel",
        "deleteOriginEndpoint",
        "describeChannel",
        "describeHarvestJob",
        "describeOriginEndpoint",
        "listChannels",
        "listHarvestJobs",
        "listOriginEndpoints",
        "listTagsForResource",
        "rotateChannelCredentials",
        "rotateIngestEndpointCredentials",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updateOriginEndpoint"
      ]
    },
    MediaStore: {
      name: "MediaStore",
      methods: [
        "createContainer",
        "deleteContainer",
        "deleteContainerPolicy",
        "deleteCorsPolicy",
        "deleteLifecyclePolicy",
        "describeContainer",
        "getContainerPolicy",
        "getCorsPolicy",
        "getLifecyclePolicy",
        "listContainers",
        "listTagsForResource",
        "putContainerPolicy",
        "putCorsPolicy",
        "putLifecyclePolicy",
        "startAccessLogging",
        "stopAccessLogging",
        "tagResource",
        "untagResource"
      ]
    },
    MediaStoreData: {
      name: "MediaStoreData",
      methods: [
        "deleteObject",
        "describeObject",
        "getObject",
        "listItems",
        "putObject"
      ]
    },
    AppSync: {
      name: "AppSync",
      methods: [
        "createApiCache",
        "createApiKey",
        "createDataSource",
        "createFunction",
        "createGraphqlApi",
        "createResolver",
        "createType",
        "deleteApiCache",
        "deleteApiKey",
        "deleteDataSource",
        "deleteFunction",
        "deleteGraphqlApi",
        "deleteResolver",
        "deleteType",
        "flushApiCache",
        "getApiCache",
        "getDataSource",
        "getFunction",
        "getGraphqlApi",
        "getIntrospectionSchema",
        "getResolver",
        "getSchemaCreationStatus",
        "getType",
        "listApiKeys",
        "listDataSources",
        "listFunctions",
        "listGraphqlApis",
        "listResolvers",
        "listResolversByFunction",
        "listTagsForResource",
        "listTypes",
        "startSchemaCreation",
        "tagResource",
        "untagResource",
        "updateApiCache",
        "updateApiKey",
        "updateDataSource",
        "updateFunction",
        "updateGraphqlApi",
        "updateResolver",
        "updateType"
      ]
    },
    GuardDuty: {
      name: "GuardDuty",
      methods: [
        "acceptInvitation",
        "archiveFindings",
        "createDetector",
        "createFilter",
        "createIPSet",
        "createMembers",
        "createPublishingDestination",
        "createSampleFindings",
        "createThreatIntelSet",
        "declineInvitations",
        "deleteDetector",
        "deleteFilter",
        "deleteIPSet",
        "deleteInvitations",
        "deleteMembers",
        "deletePublishingDestination",
        "deleteThreatIntelSet",
        "describePublishingDestination",
        "disassociateFromMasterAccount",
        "disassociateMembers",
        "getDetector",
        "getFilter",
        "getFindings",
        "getFindingsStatistics",
        "getIPSet",
        "getInvitationsCount",
        "getMasterAccount",
        "getMembers",
        "getThreatIntelSet",
        "inviteMembers",
        "listDetectors",
        "listFilters",
        "listFindings",
        "listIPSets",
        "listInvitations",
        "listMembers",
        "listPublishingDestinations",
        "listTagsForResource",
        "listThreatIntelSets",
        "startMonitoringMembers",
        "stopMonitoringMembers",
        "tagResource",
        "unarchiveFindings",
        "untagResource",
        "updateDetector",
        "updateFilter",
        "updateFindingsFeedback",
        "updateIPSet",
        "updatePublishingDestination",
        "updateThreatIntelSet"
      ]
    },
    MQ: {
      name: "MQ",
      methods: [
        "createBroker",
        "createConfiguration",
        "createTags",
        "createUser",
        "deleteBroker",
        "deleteTags",
        "deleteUser",
        "describeBroker",
        "describeBrokerEngineTypes",
        "describeBrokerInstanceOptions",
        "describeConfiguration",
        "describeConfigurationRevision",
        "describeUser",
        "listBrokers",
        "listConfigurationRevisions",
        "listConfigurations",
        "listTags",
        "listUsers",
        "rebootBroker",
        "updateBroker",
        "updateConfiguration",
        "updateUser"
      ]
    },
    Comprehend: {
      name: "Comprehend",
      methods: [
        "batchDetectDominantLanguage",
        "batchDetectEntities",
        "batchDetectKeyPhrases",
        "batchDetectSentiment",
        "batchDetectSyntax",
        "classifyDocument",
        "createDocumentClassifier",
        "createEndpoint",
        "createEntityRecognizer",
        "deleteDocumentClassifier",
        "deleteEndpoint",
        "deleteEntityRecognizer",
        "describeDocumentClassificationJob",
        "describeDocumentClassifier",
        "describeDominantLanguageDetectionJob",
        "describeEndpoint",
        "describeEntitiesDetectionJob",
        "describeEntityRecognizer",
        "describeKeyPhrasesDetectionJob",
        "describeSentimentDetectionJob",
        "describeTopicsDetectionJob",
        "detectDominantLanguage",
        "detectEntities",
        "detectKeyPhrases",
        "detectSentiment",
        "detectSyntax",
        "listDocumentClassificationJobs",
        "listDocumentClassifiers",
        "listDominantLanguageDetectionJobs",
        "listEndpoints",
        "listEntitiesDetectionJobs",
        "listEntityRecognizers",
        "listKeyPhrasesDetectionJobs",
        "listSentimentDetectionJobs",
        "listTagsForResource",
        "listTopicsDetectionJobs",
        "startDocumentClassificationJob",
        "startDominantLanguageDetectionJob",
        "startEntitiesDetectionJob",
        "startKeyPhrasesDetectionJob",
        "startSentimentDetectionJob",
        "startTopicsDetectionJob",
        "stopDominantLanguageDetectionJob",
        "stopEntitiesDetectionJob",
        "stopKeyPhrasesDetectionJob",
        "stopSentimentDetectionJob",
        "stopTrainingDocumentClassifier",
        "stopTrainingEntityRecognizer",
        "tagResource",
        "untagResource",
        "updateEndpoint"
      ]
    },
    IoTJobsDataPlane: {
      name: "IoTJobsDataPlane",
      methods: [
        "describeJobExecution",
        "getPendingJobExecutions",
        "startNextPendingJobExecution",
        "updateJobExecution"
      ]
    },
    KinesisVideoArchivedMedia: {
      name: "KinesisVideoArchivedMedia",
      methods: [
        "getDASHStreamingSessionURL",
        "getHLSStreamingSessionURL",
        "getMediaForFragmentList",
        "listFragments"
      ]
    },
    KinesisVideoMedia: { name: "KinesisVideoMedia", methods: ["getMedia"] },
    KinesisVideo: {
      name: "KinesisVideo",
      methods: [
        "createSignalingChannel",
        "createStream",
        "deleteSignalingChannel",
        "deleteStream",
        "describeSignalingChannel",
        "describeStream",
        "getDataEndpoint",
        "getSignalingChannelEndpoint",
        "listSignalingChannels",
        "listStreams",
        "listTagsForResource",
        "listTagsForStream",
        "tagResource",
        "tagStream",
        "untagResource",
        "untagStream",
        "updateDataRetention",
        "updateSignalingChannel",
        "updateStream"
      ]
    },
    SageMakerRuntime: { name: "SageMakerRuntime", methods: ["invokeEndpoint"] },
    SageMaker: {
      name: "SageMaker",
      methods: [
        "addTags",
        "associateTrialComponent",
        "createAlgorithm",
        "createApp",
        "createAutoMLJob",
        "createCodeRepository",
        "createCompilationJob",
        "createDomain",
        "createEndpoint",
        "createEndpointConfig",
        "createExperiment",
        "createFlowDefinition",
        "createHumanTaskUi",
        "createHyperParameterTuningJob",
        "createLabelingJob",
        "createModel",
        "createModelPackage",
        "createMonitoringSchedule",
        "createNotebookInstance",
        "createNotebookInstanceLifecycleConfig",
        "createPresignedDomainUrl",
        "createPresignedNotebookInstanceUrl",
        "createProcessingJob",
        "createTrainingJob",
        "createTransformJob",
        "createTrial",
        "createTrialComponent",
        "createUserProfile",
        "createWorkteam",
        "deleteAlgorithm",
        "deleteApp",
        "deleteCodeRepository",
        "deleteDomain",
        "deleteEndpoint",
        "deleteEndpointConfig",
        "deleteExperiment",
        "deleteFlowDefinition",
        "deleteModel",
        "deleteModelPackage",
        "deleteMonitoringSchedule",
        "deleteNotebookInstance",
        "deleteNotebookInstanceLifecycleConfig",
        "deleteTags",
        "deleteTrial",
        "deleteTrialComponent",
        "deleteUserProfile",
        "deleteWorkteam",
        "describeAlgorithm",
        "describeApp",
        "describeAutoMLJob",
        "describeCodeRepository",
        "describeCompilationJob",
        "describeDomain",
        "describeEndpoint",
        "describeEndpointConfig",
        "describeExperiment",
        "describeFlowDefinition",
        "describeHumanTaskUi",
        "describeHyperParameterTuningJob",
        "describeLabelingJob",
        "describeModel",
        "describeModelPackage",
        "describeMonitoringSchedule",
        "describeNotebookInstance",
        "describeNotebookInstanceLifecycleConfig",
        "describeProcessingJob",
        "describeSubscribedWorkteam",
        "describeTrainingJob",
        "describeTransformJob",
        "describeTrial",
        "describeTrialComponent",
        "describeUserProfile",
        "describeWorkteam",
        "disassociateTrialComponent",
        "getSearchSuggestions",
        "listAlgorithms",
        "listApps",
        "listAutoMLJobs",
        "listCandidatesForAutoMLJob",
        "listCodeRepositories",
        "listCompilationJobs",
        "listDomains",
        "listEndpointConfigs",
        "listEndpoints",
        "listExperiments",
        "listFlowDefinitions",
        "listHumanTaskUis",
        "listHyperParameterTuningJobs",
        "listLabelingJobs",
        "listLabelingJobsForWorkteam",
        "listModelPackages",
        "listModels",
        "listMonitoringExecutions",
        "listMonitoringSchedules",
        "listNotebookInstanceLifecycleConfigs",
        "listNotebookInstances",
        "listProcessingJobs",
        "listSubscribedWorkteams",
        "listTags",
        "listTrainingJobs",
        "listTrainingJobsForHyperParameterTuningJob",
        "listTransformJobs",
        "listTrialComponents",
        "listTrials",
        "listUserProfiles",
        "listWorkteams",
        "renderUiTemplate",
        "search",
        "startMonitoringSchedule",
        "startNotebookInstance",
        "stopAutoMLJob",
        "stopCompilationJob",
        "stopHyperParameterTuningJob",
        "stopLabelingJob",
        "stopMonitoringSchedule",
        "stopNotebookInstance",
        "stopProcessingJob",
        "stopTrainingJob",
        "stopTransformJob",
        "updateCodeRepository",
        "updateDomain",
        "updateEndpoint",
        "updateEndpointWeightsAndCapacities",
        "updateExperiment",
        "updateMonitoringSchedule",
        "updateNotebookInstance",
        "updateNotebookInstanceLifecycleConfig",
        "updateTrial",
        "updateTrialComponent",
        "updateUserProfile",
        "updateWorkteam"
      ]
    },
    Translate: {
      name: "Translate",
      methods: [
        "deleteTerminology",
        "getTerminology",
        "importTerminology",
        "listTerminologies",
        "translateText"
      ]
    },
    ResourceGroups: {
      name: "ResourceGroups",
      methods: [
        "createGroup",
        "deleteGroup",
        "getGroup",
        "getGroupQuery",
        "getTags",
        "listGroupResources",
        "listGroups",
        "searchResources",
        "tag",
        "untag",
        "updateGroup",
        "updateGroupQuery"
      ]
    },
    AlexaForBusiness: {
      name: "AlexaForBusiness",
      methods: [
        "approveSkill",
        "associateContactWithAddressBook",
        "associateDeviceWithNetworkProfile",
        "associateDeviceWithRoom",
        "associateSkillGroupWithRoom",
        "associateSkillWithSkillGroup",
        "associateSkillWithUsers",
        "createAddressBook",
        "createBusinessReportSchedule",
        "createConferenceProvider",
        "createContact",
        "createGatewayGroup",
        "createNetworkProfile",
        "createProfile",
        "createRoom",
        "createSkillGroup",
        "createUser",
        "deleteAddressBook",
        "deleteBusinessReportSchedule",
        "deleteConferenceProvider",
        "deleteContact",
        "deleteDevice",
        "deleteDeviceUsageData",
        "deleteGatewayGroup",
        "deleteNetworkProfile",
        "deleteProfile",
        "deleteRoom",
        "deleteRoomSkillParameter",
        "deleteSkillAuthorization",
        "deleteSkillGroup",
        "deleteUser",
        "disassociateContactFromAddressBook",
        "disassociateDeviceFromRoom",
        "disassociateSkillFromSkillGroup",
        "disassociateSkillFromUsers",
        "disassociateSkillGroupFromRoom",
        "forgetSmartHomeAppliances",
        "getAddressBook",
        "getConferencePreference",
        "getConferenceProvider",
        "getContact",
        "getDevice",
        "getGateway",
        "getGatewayGroup",
        "getInvitationConfiguration",
        "getNetworkProfile",
        "getProfile",
        "getRoom",
        "getRoomSkillParameter",
        "getSkillGroup",
        "listBusinessReportSchedules",
        "listConferenceProviders",
        "listDeviceEvents",
        "listGatewayGroups",
        "listGateways",
        "listSkills",
        "listSkillsStoreCategories",
        "listSkillsStoreSkillsByCategory",
        "listSmartHomeAppliances",
        "listTags",
        "putConferencePreference",
        "putInvitationConfiguration",
        "putRoomSkillParameter",
        "putSkillAuthorization",
        "registerAVSDevice",
        "rejectSkill",
        "resolveRoom",
        "revokeInvitation",
        "searchAddressBooks",
        "searchContacts",
        "searchDevices",
        "searchNetworkProfiles",
        "searchProfiles",
        "searchRooms",
        "searchSkillGroups",
        "searchUsers",
        "sendAnnouncement",
        "sendInvitation",
        "startDeviceSync",
        "startSmartHomeApplianceDiscovery",
        "tagResource",
        "untagResource",
        "updateAddressBook",
        "updateBusinessReportSchedule",
        "updateConferenceProvider",
        "updateContact",
        "updateDevice",
        "updateGateway",
        "updateGatewayGroup",
        "updateNetworkProfile",
        "updateProfile",
        "updateRoom",
        "updateSkillGroup"
      ]
    },
    Cloud9: {
      name: "Cloud9",
      methods: [
        "createEnvironmentEC2",
        "createEnvironmentMembership",
        "deleteEnvironment",
        "deleteEnvironmentMembership",
        "describeEnvironmentMemberships",
        "describeEnvironmentStatus",
        "describeEnvironments",
        "listEnvironments",
        "updateEnvironment",
        "updateEnvironmentMembership"
      ]
    },
    ServerlessApplicationRepository: {
      name: "ServerlessApplicationRepository",
      methods: [
        "createApplication",
        "createApplicationVersion",
        "createCloudFormationChangeSet",
        "createCloudFormationTemplate",
        "deleteApplication",
        "getApplication",
        "getApplicationPolicy",
        "getCloudFormationTemplate",
        "listApplicationDependencies",
        "listApplicationVersions",
        "listApplications",
        "putApplicationPolicy",
        "updateApplication"
      ]
    },
    ServiceDiscovery: {
      name: "ServiceDiscovery",
      methods: [
        "createHttpNamespace",
        "createPrivateDnsNamespace",
        "createPublicDnsNamespace",
        "createService",
        "deleteNamespace",
        "deleteService",
        "deregisterInstance",
        "discoverInstances",
        "getInstance",
        "getInstancesHealthStatus",
        "getNamespace",
        "getOperation",
        "getService",
        "listInstances",
        "listNamespaces",
        "listOperations",
        "listServices",
        "registerInstance",
        "updateInstanceCustomHealthStatus",
        "updateService"
      ]
    },
    WorkMail: {
      name: "WorkMail",
      methods: [
        "associateDelegateToResource",
        "associateMemberToGroup",
        "createAlias",
        "createGroup",
        "createResource",
        "createUser",
        "deleteAlias",
        "deleteGroup",
        "deleteMailboxPermissions",
        "deleteResource",
        "deleteUser",
        "deregisterFromWorkMail",
        "describeGroup",
        "describeOrganization",
        "describeResource",
        "describeUser",
        "disassociateDelegateFromResource",
        "disassociateMemberFromGroup",
        "getMailboxDetails",
        "listAliases",
        "listGroupMembers",
        "listGroups",
        "listMailboxPermissions",
        "listOrganizations",
        "listResourceDelegates",
        "listResources",
        "listUsers",
        "putMailboxPermissions",
        "registerToWorkMail",
        "resetPassword",
        "updateMailboxQuota",
        "updatePrimaryEmailAddress",
        "updateResource"
      ]
    },
    AutoScalingPlans: {
      name: "AutoScalingPlans",
      methods: [
        "createScalingPlan",
        "deleteScalingPlan",
        "describeScalingPlanResources",
        "describeScalingPlans",
        "getScalingPlanResourceForecastData",
        "updateScalingPlan"
      ]
    },
    TranscribeService: {
      name: "TranscribeService",
      methods: [
        "createVocabulary",
        "createVocabularyFilter",
        "deleteTranscriptionJob",
        "deleteVocabulary",
        "deleteVocabularyFilter",
        "getTranscriptionJob",
        "getVocabulary",
        "getVocabularyFilter",
        "listTranscriptionJobs",
        "listVocabularies",
        "listVocabularyFilters",
        "startTranscriptionJob",
        "updateVocabulary",
        "updateVocabularyFilter"
      ]
    },
    Connect: {
      name: "Connect",
      methods: [
        "createUser",
        "deleteUser",
        "describeUser",
        "describeUserHierarchyGroup",
        "describeUserHierarchyStructure",
        "getContactAttributes",
        "getCurrentMetricData",
        "getFederationToken",
        "getMetricData",
        "listContactFlows",
        "listHoursOfOperations",
        "listPhoneNumbers",
        "listQueues",
        "listRoutingProfiles",
        "listSecurityProfiles",
        "listTagsForResource",
        "listUserHierarchyGroups",
        "listUsers",
        "startChatContact",
        "startOutboundVoiceContact",
        "stopContact",
        "tagResource",
        "untagResource",
        "updateContactAttributes",
        "updateUserHierarchy",
        "updateUserIdentityInfo",
        "updateUserPhoneConfig",
        "updateUserRoutingProfile",
        "updateUserSecurityProfiles"
      ]
    },
    ACMPCA: {
      name: "ACMPCA",
      methods: [
        "createCertificateAuthority",
        "createCertificateAuthorityAuditReport",
        "createPermission",
        "deleteCertificateAuthority",
        "deletePermission",
        "describeCertificateAuthority",
        "describeCertificateAuthorityAuditReport",
        "getCertificate",
        "getCertificateAuthorityCertificate",
        "getCertificateAuthorityCsr",
        "importCertificateAuthorityCertificate",
        "issueCertificate",
        "listCertificateAuthorities",
        "listPermissions",
        "listTags",
        "restoreCertificateAuthority",
        "revokeCertificate",
        "tagCertificateAuthority",
        "untagCertificateAuthority",
        "updateCertificateAuthority"
      ]
    },
    FMS: {
      name: "FMS",
      methods: [
        "associateAdminAccount",
        "deleteNotificationChannel",
        "deletePolicy",
        "disassociateAdminAccount",
        "getAdminAccount",
        "getComplianceDetail",
        "getNotificationChannel",
        "getPolicy",
        "getProtectionStatus",
        "listComplianceStatus",
        "listMemberAccounts",
        "listPolicies",
        "putNotificationChannel",
        "putPolicy"
      ]
    },
    SecretsManager: {
      name: "SecretsManager",
      methods: [
        "cancelRotateSecret",
        "createSecret",
        "deleteResourcePolicy",
        "deleteSecret",
        "describeSecret",
        "getRandomPassword",
        "getResourcePolicy",
        "getSecretValue",
        "listSecretVersionIds",
        "listSecrets",
        "putResourcePolicy",
        "putSecretValue",
        "restoreSecret",
        "rotateSecret",
        "tagResource",
        "untagResource",
        "updateSecret",
        "updateSecretVersionStage"
      ]
    },
    IoTAnalytics: {
      name: "IoTAnalytics",
      methods: [
        "batchPutMessage",
        "cancelPipelineReprocessing",
        "createChannel",
        "createDataset",
        "createDatasetContent",
        "createDatastore",
        "createPipeline",
        "deleteChannel",
        "deleteDataset",
        "deleteDatasetContent",
        "deleteDatastore",
        "deletePipeline",
        "describeChannel",
        "describeDataset",
        "describeDatastore",
        "describeLoggingOptions",
        "describePipeline",
        "getDatasetContent",
        "listChannels",
        "listDatasetContents",
        "listDatasets",
        "listDatastores",
        "listPipelines",
        "listTagsForResource",
        "putLoggingOptions",
        "runPipelineActivity",
        "sampleChannelData",
        "startPipelineReprocessing",
        "tagResource",
        "untagResource",
        "updateChannel",
        "updateDataset",
        "updateDatastore",
        "updatePipeline"
      ]
    },
    IoT1ClickDevicesService: {
      name: "IoT1ClickDevicesService",
      methods: [
        "claimDevicesByClaimCode",
        "describeDevice",
        "finalizeDeviceClaim",
        "getDeviceMethods",
        "initiateDeviceClaim",
        "invokeDeviceMethod",
        "listDeviceEvents",
        "listDevices",
        "listTagsForResource",
        "tagResource",
        "unclaimDevice",
        "untagResource",
        "updateDeviceState"
      ]
    },
    IoT1ClickProjects: {
      name: "IoT1ClickProjects",
      methods: [
        "associateDeviceWithPlacement",
        "createPlacement",
        "createProject",
        "deletePlacement",
        "deleteProject",
        "describePlacement",
        "describeProject",
        "disassociateDeviceFromPlacement",
        "getDevicesInPlacement",
        "listPlacements",
        "listProjects",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updatePlacement",
        "updateProject"
      ]
    },
    PI: {
      name: "PI",
      methods: ["describeDimensionKeys", "getResourceMetrics"]
    },
    Neptune: {
      name: "Neptune",
      methods: [
        "addRoleToDBCluster",
        "addSourceIdentifierToSubscription",
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "copyDBClusterParameterGroup",
        "copyDBClusterSnapshot",
        "copyDBParameterGroup",
        "createDBCluster",
        "createDBClusterParameterGroup",
        "createDBClusterSnapshot",
        "createDBInstance",
        "createDBParameterGroup",
        "createDBSubnetGroup",
        "createEventSubscription",
        "deleteDBCluster",
        "deleteDBClusterParameterGroup",
        "deleteDBClusterSnapshot",
        "deleteDBInstance",
        "deleteDBParameterGroup",
        "deleteDBSubnetGroup",
        "deleteEventSubscription",
        "describeDBClusterParameterGroups",
        "describeDBClusterParameters",
        "describeDBClusterSnapshotAttributes",
        "describeDBClusterSnapshots",
        "describeDBClusters",
        "describeDBEngineVersions",
        "describeDBInstances",
        "describeDBParameterGroups",
        "describeDBParameters",
        "describeDBSubnetGroups",
        "describeEngineDefaultClusterParameters",
        "describeEngineDefaultParameters",
        "describeEventCategories",
        "describeEventSubscriptions",
        "describeEvents",
        "describeOrderableDBInstanceOptions",
        "describePendingMaintenanceActions",
        "describeValidDBInstanceModifications",
        "failoverDBCluster",
        "listTagsForResource",
        "modifyDBCluster",
        "modifyDBClusterParameterGroup",
        "modifyDBClusterSnapshotAttribute",
        "modifyDBInstance",
        "modifyDBParameterGroup",
        "modifyDBSubnetGroup",
        "modifyEventSubscription",
        "promoteReadReplicaDBCluster",
        "rebootDBInstance",
        "removeRoleFromDBCluster",
        "removeSourceIdentifierFromSubscription",
        "removeTagsFromResource",
        "resetDBClusterParameterGroup",
        "resetDBParameterGroup",
        "restoreDBClusterFromSnapshot",
        "restoreDBClusterToPointInTime"
      ]
    },
    MediaTailor: {
      name: "MediaTailor",
      methods: [
        "deletePlaybackConfiguration",
        "getPlaybackConfiguration",
        "listPlaybackConfigurations",
        "listTagsForResource",
        "putPlaybackConfiguration",
        "tagResource",
        "untagResource"
      ]
    },
    EKS: {
      name: "EKS",
      methods: [
        "createCluster",
        "createFargateProfile",
        "createNodegroup",
        "deleteCluster",
        "deleteFargateProfile",
        "deleteNodegroup",
        "describeCluster",
        "describeFargateProfile",
        "describeNodegroup",
        "describeUpdate",
        "listClusters",
        "listFargateProfiles",
        "listNodegroups",
        "listTagsForResource",
        "listUpdates",
        "tagResource",
        "untagResource",
        "updateClusterConfig",
        "updateClusterVersion",
        "updateNodegroupConfig",
        "updateNodegroupVersion"
      ]
    },
    Macie: {
      name: "Macie",
      methods: [
        "associateMemberAccount",
        "associateS3Resources",
        "disassociateMemberAccount",
        "disassociateS3Resources",
        "listMemberAccounts",
        "listS3Resources",
        "updateS3Resources"
      ]
    },
    DLM: {
      name: "DLM",
      methods: [
        "createLifecyclePolicy",
        "deleteLifecyclePolicy",
        "getLifecyclePolicies",
        "getLifecyclePolicy",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateLifecyclePolicy"
      ]
    },
    Signer: {
      name: "Signer",
      methods: [
        "cancelSigningProfile",
        "describeSigningJob",
        "getSigningPlatform",
        "getSigningProfile",
        "listSigningJobs",
        "listSigningPlatforms",
        "listSigningProfiles",
        "listTagsForResource",
        "putSigningProfile",
        "startSigningJob",
        "tagResource",
        "untagResource"
      ]
    },
    Chime: {
      name: "Chime",
      methods: [
        "associatePhoneNumberWithUser",
        "associatePhoneNumbersWithVoiceConnector",
        "associatePhoneNumbersWithVoiceConnectorGroup",
        "batchCreateAttendee",
        "batchCreateRoomMembership",
        "batchDeletePhoneNumber",
        "batchSuspendUser",
        "batchUnsuspendUser",
        "batchUpdatePhoneNumber",
        "batchUpdateUser",
        "createAccount",
        "createAttendee",
        "createBot",
        "createMeeting",
        "createPhoneNumberOrder",
        "createRoom",
        "createRoomMembership",
        "createVoiceConnector",
        "createVoiceConnectorGroup",
        "deleteAccount",
        "deleteAttendee",
        "deleteEventsConfiguration",
        "deleteMeeting",
        "deletePhoneNumber",
        "deleteRoom",
        "deleteRoomMembership",
        "deleteVoiceConnector",
        "deleteVoiceConnectorGroup",
        "deleteVoiceConnectorOrigination",
        "deleteVoiceConnectorStreamingConfiguration",
        "deleteVoiceConnectorTermination",
        "deleteVoiceConnectorTerminationCredentials",
        "disassociatePhoneNumberFromUser",
        "disassociatePhoneNumbersFromVoiceConnector",
        "disassociatePhoneNumbersFromVoiceConnectorGroup",
        "getAccount",
        "getAccountSettings",
        "getAttendee",
        "getBot",
        "getEventsConfiguration",
        "getGlobalSettings",
        "getMeeting",
        "getPhoneNumber",
        "getPhoneNumberOrder",
        "getPhoneNumberSettings",
        "getRoom",
        "getUser",
        "getUserSettings",
        "getVoiceConnector",
        "getVoiceConnectorGroup",
        "getVoiceConnectorLoggingConfiguration",
        "getVoiceConnectorOrigination",
        "getVoiceConnectorStreamingConfiguration",
        "getVoiceConnectorTermination",
        "getVoiceConnectorTerminationHealth",
        "inviteUsers",
        "listAccounts",
        "listAttendees",
        "listBots",
        "listMeetings",
        "listPhoneNumberOrders",
        "listPhoneNumbers",
        "listRoomMemberships",
        "listRooms",
        "listUsers",
        "listVoiceConnectorGroups",
        "listVoiceConnectorTerminationCredentials",
        "listVoiceConnectors",
        "logoutUser",
        "putEventsConfiguration",
        "putVoiceConnectorLoggingConfiguration",
        "putVoiceConnectorOrigination",
        "putVoiceConnectorStreamingConfiguration",
        "putVoiceConnectorTermination",
        "putVoiceConnectorTerminationCredentials",
        "regenerateSecurityToken",
        "resetPersonalPIN",
        "restorePhoneNumber",
        "searchAvailablePhoneNumbers",
        "updateAccount",
        "updateAccountSettings",
        "updateBot",
        "updateGlobalSettings",
        "updatePhoneNumber",
        "updatePhoneNumberSettings",
        "updateRoom",
        "updateRoomMembership",
        "updateUser",
        "updateUserSettings",
        "updateVoiceConnector",
        "updateVoiceConnectorGroup"
      ]
    },
    PinpointEmail: {
      name: "PinpointEmail",
      methods: [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createDedicatedIpPool",
        "createDeliverabilityTestReport",
        "createEmailIdentity",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "deleteDedicatedIpPool",
        "deleteEmailIdentity",
        "getAccount",
        "getBlacklistReports",
        "getConfigurationSet",
        "getConfigurationSetEventDestinations",
        "getDedicatedIp",
        "getDedicatedIps",
        "getDeliverabilityDashboardOptions",
        "getDeliverabilityTestReport",
        "getDomainDeliverabilityCampaign",
        "getDomainStatisticsReport",
        "getEmailIdentity",
        "listConfigurationSets",
        "listDedicatedIpPools",
        "listDeliverabilityTestReports",
        "listDomainDeliverabilityCampaigns",
        "listEmailIdentities",
        "listTagsForResource",
        "putAccountDedicatedIpWarmupAttributes",
        "putAccountSendingAttributes",
        "putConfigurationSetDeliveryOptions",
        "putConfigurationSetReputationOptions",
        "putConfigurationSetSendingOptions",
        "putConfigurationSetTrackingOptions",
        "putDedicatedIpInPool",
        "putDedicatedIpWarmupAttributes",
        "putDeliverabilityDashboardOption",
        "putEmailIdentityDkimAttributes",
        "putEmailIdentityFeedbackAttributes",
        "putEmailIdentityMailFromAttributes",
        "sendEmail",
        "tagResource",
        "untagResource",
        "updateConfigurationSetEventDestination"
      ]
    },
    RAM: {
      name: "RAM",
      methods: [
        "acceptResourceShareInvitation",
        "associateResourceShare",
        "associateResourceSharePermission",
        "createResourceShare",
        "deleteResourceShare",
        "disassociateResourceShare",
        "disassociateResourceSharePermission",
        "enableSharingWithAwsOrganization",
        "getPermission",
        "getResourcePolicies",
        "getResourceShareAssociations",
        "getResourceShareInvitations",
        "getResourceShares",
        "listPendingInvitationResources",
        "listPermissions",
        "listPrincipals",
        "listResourceSharePermissions",
        "listResources",
        "promoteResourceShareCreatedFromPolicy",
        "rejectResourceShareInvitation",
        "tagResource",
        "untagResource",
        "updateResourceShare"
      ]
    },
    Route53Resolver: {
      name: "Route53Resolver",
      methods: [
        "associateResolverEndpointIpAddress",
        "associateResolverRule",
        "createResolverEndpoint",
        "createResolverRule",
        "deleteResolverEndpoint",
        "deleteResolverRule",
        "disassociateResolverEndpointIpAddress",
        "disassociateResolverRule",
        "getResolverEndpoint",
        "getResolverRule",
        "getResolverRuleAssociation",
        "getResolverRulePolicy",
        "listResolverEndpointIpAddresses",
        "listResolverEndpoints",
        "listResolverRuleAssociations",
        "listResolverRules",
        "listTagsForResource",
        "putResolverRulePolicy",
        "tagResource",
        "untagResource",
        "updateResolverEndpoint",
        "updateResolverRule"
      ]
    },
    PinpointSMSVoice: {
      name: "PinpointSMSVoice",
      methods: [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "getConfigurationSetEventDestinations",
        "listConfigurationSets",
        "sendVoiceMessage",
        "updateConfigurationSetEventDestination"
      ]
    },
    QuickSight: {
      name: "QuickSight",
      methods: [
        "cancelIngestion",
        "createDashboard",
        "createDataSet",
        "createDataSource",
        "createGroup",
        "createGroupMembership",
        "createIAMPolicyAssignment",
        "createIngestion",
        "createTemplate",
        "createTemplateAlias",
        "deleteDashboard",
        "deleteDataSet",
        "deleteDataSource",
        "deleteGroup",
        "deleteGroupMembership",
        "deleteIAMPolicyAssignment",
        "deleteTemplate",
        "deleteTemplateAlias",
        "deleteUser",
        "deleteUserByPrincipalId",
        "describeDashboard",
        "describeDashboardPermissions",
        "describeDataSet",
        "describeDataSetPermissions",
        "describeDataSource",
        "describeDataSourcePermissions",
        "describeGroup",
        "describeIAMPolicyAssignment",
        "describeIngestion",
        "describeTemplate",
        "describeTemplateAlias",
        "describeTemplatePermissions",
        "describeUser",
        "getDashboardEmbedUrl",
        "listDashboardVersions",
        "listDashboards",
        "listDataSets",
        "listDataSources",
        "listGroupMemberships",
        "listGroups",
        "listIAMPolicyAssignments",
        "listIAMPolicyAssignmentsForUser",
        "listIngestions",
        "listTagsForResource",
        "listTemplateAliases",
        "listTemplateVersions",
        "listTemplates",
        "listUserGroups",
        "listUsers",
        "registerUser",
        "tagResource",
        "untagResource",
        "updateDashboard",
        "updateDashboardPermissions",
        "updateDashboardPublishedVersion",
        "updateDataSet",
        "updateDataSetPermissions",
        "updateDataSource",
        "updateDataSourcePermissions",
        "updateGroup",
        "updateIAMPolicyAssignment",
        "updateTemplate",
        "updateTemplateAlias",
        "updateTemplatePermissions",
        "updateUser"
      ]
    },
    RDSDataService: {
      name: "RDSDataService",
      methods: [
        "batchExecuteStatement",
        "beginTransaction",
        "commitTransaction",
        "executeSql",
        "executeStatement",
        "rollbackTransaction"
      ]
    },
    Amplify: {
      name: "Amplify",
      methods: [
        "createApp",
        "createBackendEnvironment",
        "createBranch",
        "createDeployment",
        "createDomainAssociation",
        "createWebhook",
        "deleteApp",
        "deleteBackendEnvironment",
        "deleteBranch",
        "deleteDomainAssociation",
        "deleteJob",
        "deleteWebhook",
        "generateAccessLogs",
        "getApp",
        "getArtifactUrl",
        "getBackendEnvironment",
        "getBranch",
        "getDomainAssociation",
        "getJob",
        "getWebhook",
        "listApps",
        "listArtifacts",
        "listBackendEnvironments",
        "listBranches",
        "listDomainAssociations",
        "listJobs",
        "listTagsForResource",
        "listWebhooks",
        "startDeployment",
        "startJob",
        "stopJob",
        "tagResource",
        "untagResource",
        "updateApp",
        "updateBranch",
        "updateDomainAssociation",
        "updateWebhook"
      ]
    },
    DataSync: {
      name: "DataSync",
      methods: [
        "cancelTaskExecution",
        "createAgent",
        "createLocationEfs",
        "createLocationNfs",
        "createLocationS3",
        "createLocationSmb",
        "createTask",
        "deleteAgent",
        "deleteLocation",
        "deleteTask",
        "describeAgent",
        "describeLocationEfs",
        "describeLocationNfs",
        "describeLocationS3",
        "describeLocationSmb",
        "describeTask",
        "describeTaskExecution",
        "listAgents",
        "listLocations",
        "listTagsForResource",
        "listTaskExecutions",
        "listTasks",
        "startTaskExecution",
        "tagResource",
        "untagResource",
        "updateAgent",
        "updateTask"
      ]
    },
    RoboMaker: {
      name: "RoboMaker",
      methods: [
        "batchDescribeSimulationJob",
        "cancelDeploymentJob",
        "cancelSimulationJob",
        "createDeploymentJob",
        "createFleet",
        "createRobot",
        "createRobotApplication",
        "createRobotApplicationVersion",
        "createSimulationApplication",
        "createSimulationApplicationVersion",
        "createSimulationJob",
        "deleteFleet",
        "deleteRobot",
        "deleteRobotApplication",
        "deleteSimulationApplication",
        "deregisterRobot",
        "describeDeploymentJob",
        "describeFleet",
        "describeRobot",
        "describeRobotApplication",
        "describeSimulationApplication",
        "describeSimulationJob",
        "listDeploymentJobs",
        "listFleets",
        "listRobotApplications",
        "listRobots",
        "listSimulationApplications",
        "listSimulationJobs",
        "listTagsForResource",
        "registerRobot",
        "restartSimulationJob",
        "syncDeploymentJob",
        "tagResource",
        "untagResource",
        "updateRobotApplication",
        "updateSimulationApplication"
      ]
    },
    Transfer: {
      name: "Transfer",
      methods: [
        "createServer",
        "createUser",
        "deleteServer",
        "deleteSshPublicKey",
        "deleteUser",
        "describeServer",
        "describeUser",
        "importSshPublicKey",
        "listServers",
        "listTagsForResource",
        "listUsers",
        "startServer",
        "stopServer",
        "tagResource",
        "testIdentityProvider",
        "untagResource",
        "updateServer",
        "updateUser"
      ]
    },
    GlobalAccelerator: {
      name: "GlobalAccelerator",
      methods: [
        "createAccelerator",
        "createEndpointGroup",
        "createListener",
        "deleteAccelerator",
        "deleteEndpointGroup",
        "deleteListener",
        "describeAccelerator",
        "describeAcceleratorAttributes",
        "describeEndpointGroup",
        "describeListener",
        "listAccelerators",
        "listEndpointGroups",
        "listListeners",
        "updateAccelerator",
        "updateAcceleratorAttributes",
        "updateEndpointGroup",
        "updateListener"
      ]
    },
    ComprehendMedical: {
      name: "ComprehendMedical",
      methods: [
        "describeEntitiesDetectionV2Job",
        "describePHIDetectionJob",
        "detectEntities",
        "detectEntitiesV2",
        "detectPHI",
        "inferICD10CM",
        "inferRxNorm",
        "listEntitiesDetectionV2Jobs",
        "listPHIDetectionJobs",
        "startEntitiesDetectionV2Job",
        "startPHIDetectionJob",
        "stopEntitiesDetectionV2Job",
        "stopPHIDetectionJob"
      ]
    },
    KinesisAnalyticsV2: {
      name: "KinesisAnalyticsV2",
      methods: [
        "addApplicationCloudWatchLoggingOption",
        "addApplicationInput",
        "addApplicationInputProcessingConfiguration",
        "addApplicationOutput",
        "addApplicationReferenceDataSource",
        "addApplicationVpcConfiguration",
        "createApplication",
        "createApplicationSnapshot",
        "deleteApplication",
        "deleteApplicationCloudWatchLoggingOption",
        "deleteApplicationInputProcessingConfiguration",
        "deleteApplicationOutput",
        "deleteApplicationReferenceDataSource",
        "deleteApplicationSnapshot",
        "deleteApplicationVpcConfiguration",
        "describeApplication",
        "describeApplicationSnapshot",
        "discoverInputSchema",
        "listApplicationSnapshots",
        "listApplications",
        "listTagsForResource",
        "startApplication",
        "stopApplication",
        "tagResource",
        "untagResource",
        "updateApplication"
      ]
    },
    MediaConnect: {
      name: "MediaConnect",
      methods: [
        "addFlowOutputs",
        "createFlow",
        "deleteFlow",
        "describeFlow",
        "grantFlowEntitlements",
        "listEntitlements",
        "listFlows",
        "listTagsForResource",
        "removeFlowOutput",
        "revokeFlowEntitlement",
        "startFlow",
        "stopFlow",
        "tagResource",
        "untagResource",
        "updateFlowEntitlement",
        "updateFlowOutput",
        "updateFlowSource"
      ]
    },
    FSx: {
      name: "FSx",
      methods: [
        "cancelDataRepositoryTask",
        "createBackup",
        "createDataRepositoryTask",
        "createFileSystem",
        "createFileSystemFromBackup",
        "deleteBackup",
        "deleteFileSystem",
        "describeBackups",
        "describeDataRepositoryTasks",
        "describeFileSystems",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateFileSystem"
      ]
    },
    SecurityHub: {
      name: "SecurityHub",
      methods: [
        "acceptInvitation",
        "batchDisableStandards",
        "batchEnableStandards",
        "batchImportFindings",
        "createActionTarget",
        "createInsight",
        "createMembers",
        "declineInvitations",
        "deleteActionTarget",
        "deleteInsight",
        "deleteInvitations",
        "deleteMembers",
        "describeActionTargets",
        "describeHub",
        "describeProducts",
        "disableImportFindingsForProduct",
        "disableSecurityHub",
        "disassociateFromMasterAccount",
        "disassociateMembers",
        "enableImportFindingsForProduct",
        "enableSecurityHub",
        "getEnabledStandards",
        "getFindings",
        "getInsightResults",
        "getInsights",
        "getInvitationsCount",
        "getMasterAccount",
        "getMembers",
        "inviteMembers",
        "listEnabledProductsForImport",
        "listInvitations",
        "listMembers",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateActionTarget",
        "updateFindings",
        "updateInsight"
      ]
    },
    AppMesh: {
      name: "AppMesh",
      methods: [
        "createMesh",
        "createRoute",
        "createVirtualNode",
        "createVirtualRouter",
        "deleteMesh",
        "deleteRoute",
        "deleteVirtualNode",
        "deleteVirtualRouter",
        "describeMesh",
        "describeRoute",
        "describeVirtualNode",
        "describeVirtualRouter",
        "listMeshes",
        "listRoutes",
        "listVirtualNodes",
        "listVirtualRouters",
        "updateRoute",
        "updateVirtualNode",
        "updateVirtualRouter"
      ]
    },
    LicenseManager: {
      name: "LicenseManager",
      methods: [
        "createLicenseConfiguration",
        "deleteLicenseConfiguration",
        "getLicenseConfiguration",
        "getServiceSettings",
        "listAssociationsForLicenseConfiguration",
        "listFailuresForLicenseConfigurationOperations",
        "listLicenseConfigurations",
        "listLicenseSpecificationsForResource",
        "listResourceInventory",
        "listTagsForResource",
        "listUsageForLicenseConfiguration",
        "tagResource",
        "untagResource",
        "updateLicenseConfiguration",
        "updateLicenseSpecificationsForResource",
        "updateServiceSettings"
      ]
    },
    Kafka: {
      name: "Kafka",
      methods: [
        "createCluster",
        "createConfiguration",
        "deleteCluster",
        "describeCluster",
        "describeClusterOperation",
        "describeConfiguration",
        "describeConfigurationRevision",
        "getBootstrapBrokers",
        "listClusterOperations",
        "listClusters",
        "listConfigurationRevisions",
        "listConfigurations",
        "listNodes",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateBrokerCount",
        "updateBrokerStorage",
        "updateClusterConfiguration",
        "updateMonitoring"
      ]
    },
    ApiGatewayManagementApi: {
      name: "ApiGatewayManagementApi",
      methods: ["deleteConnection", "getConnection", "postToConnection"]
    },
    ApiGatewayV2: {
      name: "ApiGatewayV2",
      methods: [
        "createApi",
        "createApiMapping",
        "createAuthorizer",
        "createDeployment",
        "createDomainName",
        "createIntegration",
        "createIntegrationResponse",
        "createModel",
        "createRoute",
        "createRouteResponse",
        "createStage",
        "deleteApi",
        "deleteApiMapping",
        "deleteAuthorizer",
        "deleteCorsConfiguration",
        "deleteDeployment",
        "deleteDomainName",
        "deleteIntegration",
        "deleteIntegrationResponse",
        "deleteModel",
        "deleteRoute",
        "deleteRouteResponse",
        "deleteRouteSettings",
        "deleteStage",
        "getApi",
        "getApiMapping",
        "getApiMappings",
        "getApis",
        "getAuthorizer",
        "getAuthorizers",
        "getDeployment",
        "getDeployments",
        "getDomainName",
        "getDomainNames",
        "getIntegration",
        "getIntegrationResponse",
        "getIntegrationResponses",
        "getIntegrations",
        "getModel",
        "getModelTemplate",
        "getModels",
        "getRoute",
        "getRouteResponse",
        "getRouteResponses",
        "getRoutes",
        "getStage",
        "getStages",
        "getTags",
        "importApi",
        "reimportApi",
        "tagResource",
        "untagResource",
        "updateApi",
        "updateApiMapping",
        "updateAuthorizer",
        "updateDeployment",
        "updateDomainName",
        "updateIntegration",
        "updateIntegrationResponse",
        "updateModel",
        "updateRoute",
        "updateRouteResponse",
        "updateStage"
      ]
    },
    DocDB: {
      name: "DocDB",
      methods: [
        "addTagsToResource",
        "applyPendingMaintenanceAction",
        "copyDBClusterParameterGroup",
        "copyDBClusterSnapshot",
        "createDBCluster",
        "createDBClusterParameterGroup",
        "createDBClusterSnapshot",
        "createDBInstance",
        "createDBSubnetGroup",
        "deleteDBCluster",
        "deleteDBClusterParameterGroup",
        "deleteDBClusterSnapshot",
        "deleteDBInstance",
        "deleteDBSubnetGroup",
        "describeCertificates",
        "describeDBClusterParameterGroups",
        "describeDBClusterParameters",
        "describeDBClusterSnapshotAttributes",
        "describeDBClusterSnapshots",
        "describeDBClusters",
        "describeDBEngineVersions",
        "describeDBInstances",
        "describeDBSubnetGroups",
        "describeEngineDefaultClusterParameters",
        "describeEventCategories",
        "describeEvents",
        "describeOrderableDBInstanceOptions",
        "describePendingMaintenanceActions",
        "failoverDBCluster",
        "listTagsForResource",
        "modifyDBCluster",
        "modifyDBClusterParameterGroup",
        "modifyDBClusterSnapshotAttribute",
        "modifyDBInstance",
        "modifyDBSubnetGroup",
        "rebootDBInstance",
        "removeTagsFromResource",
        "resetDBClusterParameterGroup",
        "restoreDBClusterFromSnapshot",
        "restoreDBClusterToPointInTime",
        "startDBCluster",
        "stopDBCluster"
      ]
    },
    Backup: {
      name: "Backup",
      methods: [
        "createBackupPlan",
        "createBackupSelection",
        "createBackupVault",
        "deleteBackupPlan",
        "deleteBackupSelection",
        "deleteBackupVault",
        "deleteBackupVaultAccessPolicy",
        "deleteBackupVaultNotifications",
        "deleteRecoveryPoint",
        "describeBackupJob",
        "describeBackupVault",
        "describeProtectedResource",
        "describeRecoveryPoint",
        "describeRestoreJob",
        "exportBackupPlanTemplate",
        "getBackupPlan",
        "getBackupPlanFromJSON",
        "getBackupPlanFromTemplate",
        "getBackupSelection",
        "getBackupVaultAccessPolicy",
        "getBackupVaultNotifications",
        "getRecoveryPointRestoreMetadata",
        "getSupportedResourceTypes",
        "listBackupJobs",
        "listBackupPlanTemplates",
        "listBackupPlanVersions",
        "listBackupPlans",
        "listBackupSelections",
        "listBackupVaults",
        "listProtectedResources",
        "listRecoveryPointsByBackupVault",
        "listRecoveryPointsByResource",
        "listRestoreJobs",
        "listTags",
        "putBackupVaultAccessPolicy",
        "putBackupVaultNotifications",
        "startBackupJob",
        "startRestoreJob",
        "stopBackupJob",
        "tagResource",
        "untagResource",
        "updateBackupPlan",
        "updateRecoveryPointLifecycle"
      ]
    },
    WorkLink: {
      name: "WorkLink",
      methods: [
        "associateDomain",
        "associateWebsiteAuthorizationProvider",
        "associateWebsiteCertificateAuthority",
        "createFleet",
        "deleteFleet",
        "describeAuditStreamConfiguration",
        "describeCompanyNetworkConfiguration",
        "describeDevice",
        "describeDevicePolicyConfiguration",
        "describeDomain",
        "describeFleetMetadata",
        "describeIdentityProviderConfiguration",
        "describeWebsiteCertificateAuthority",
        "disassociateDomain",
        "disassociateWebsiteAuthorizationProvider",
        "disassociateWebsiteCertificateAuthority",
        "listDevices",
        "listDomains",
        "listFleets",
        "listWebsiteAuthorizationProviders",
        "listWebsiteCertificateAuthorities",
        "restoreDomainAccess",
        "revokeDomainAccess",
        "signOutUser",
        "updateAuditStreamConfiguration",
        "updateCompanyNetworkConfiguration",
        "updateDevicePolicyConfiguration",
        "updateDomainMetadata",
        "updateFleetMetadata",
        "updateIdentityProviderConfiguration"
      ]
    },
    Textract: {
      name: "Textract",
      methods: [
        "analyzeDocument",
        "detectDocumentText",
        "getDocumentAnalysis",
        "getDocumentTextDetection",
        "startDocumentAnalysis",
        "startDocumentTextDetection"
      ]
    },
    ManagedBlockchain: {
      name: "ManagedBlockchain",
      methods: [
        "createMember",
        "createNetwork",
        "createNode",
        "createProposal",
        "deleteMember",
        "deleteNode",
        "getMember",
        "getNetwork",
        "getNode",
        "getProposal",
        "listInvitations",
        "listMembers",
        "listNetworks",
        "listNodes",
        "listProposalVotes",
        "listProposals",
        "rejectInvitation",
        "voteOnProposal"
      ]
    },
    MediaPackageVod: {
      name: "MediaPackageVod",
      methods: [
        "createAsset",
        "createPackagingConfiguration",
        "createPackagingGroup",
        "deleteAsset",
        "deletePackagingConfiguration",
        "deletePackagingGroup",
        "describeAsset",
        "describePackagingConfiguration",
        "describePackagingGroup",
        "listAssets",
        "listPackagingConfigurations",
        "listPackagingGroups"
      ]
    },
    GroundStation: {
      name: "GroundStation",
      methods: [
        "cancelContact",
        "createConfig",
        "createDataflowEndpointGroup",
        "createMissionProfile",
        "deleteConfig",
        "deleteDataflowEndpointGroup",
        "deleteMissionProfile",
        "describeContact",
        "getConfig",
        "getDataflowEndpointGroup",
        "getMissionProfile",
        "listConfigs",
        "listContacts",
        "listDataflowEndpointGroups",
        "listMissionProfiles",
        "reserveContact",
        "updateConfig",
        "updateMissionProfile",
        "getMinuteUsage",
        "getSatellite",
        "listGroundStations",
        "listSatellites",
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    IoTThingsGraph: {
      name: "IoTThingsGraph",
      methods: [
        "associateEntityToThing",
        "createFlowTemplate",
        "createSystemInstance",
        "createSystemTemplate",
        "deleteFlowTemplate",
        "deleteNamespace",
        "deleteSystemInstance",
        "deleteSystemTemplate",
        "deploySystemInstance",
        "deprecateFlowTemplate",
        "deprecateSystemTemplate",
        "describeNamespace",
        "dissociateEntityFromThing",
        "getEntities",
        "getFlowTemplate",
        "getFlowTemplateRevisions",
        "getNamespaceDeletionStatus",
        "getSystemInstance",
        "getSystemTemplate",
        "getSystemTemplateRevisions",
        "getUploadStatus",
        "listFlowExecutionMessages",
        "listTagsForResource",
        "searchEntities",
        "searchFlowExecutions",
        "searchFlowTemplates",
        "searchSystemInstances",
        "searchSystemTemplates",
        "searchThings",
        "tagResource",
        "undeploySystemInstance",
        "untagResource",
        "updateFlowTemplate",
        "updateSystemTemplate",
        "uploadEntityDefinitions"
      ]
    },
    IoTEvents: {
      name: "IoTEvents",
      methods: [
        "createDetectorModel",
        "createInput",
        "deleteDetectorModel",
        "deleteInput",
        "describeDetectorModel",
        "describeInput",
        "describeLoggingOptions",
        "listDetectorModelVersions",
        "listDetectorModels",
        "listInputs",
        "listTagsForResource",
        "putLoggingOptions",
        "tagResource",
        "untagResource",
        "updateDetectorModel",
        "updateInput"
      ]
    },
    IoTEventsData: {
      name: "IoTEventsData",
      methods: [
        "batchPutMessage",
        "batchUpdateDetector",
        "describeDetector",
        "listDetectors"
      ]
    },
    Personalize: {
      name: "Personalize",
      methods: [
        "createBatchInferenceJob",
        "createCampaign",
        "createDataset",
        "createDatasetGroup",
        "createDatasetImportJob",
        "createEventTracker",
        "createSchema",
        "createSolution",
        "createSolutionVersion",
        "deleteCampaign",
        "deleteDataset",
        "deleteDatasetGroup",
        "deleteEventTracker",
        "deleteSchema",
        "deleteSolution",
        "describeAlgorithm",
        "describeBatchInferenceJob",
        "describeCampaign",
        "describeDataset",
        "describeDatasetGroup",
        "describeDatasetImportJob",
        "describeEventTracker",
        "describeFeatureTransformation",
        "describeRecipe",
        "describeSchema",
        "describeSolution",
        "describeSolutionVersion",
        "getSolutionMetrics",
        "listBatchInferenceJobs",
        "listCampaigns",
        "listDatasetGroups",
        "listDatasetImportJobs",
        "listDatasets",
        "listEventTrackers",
        "listRecipes",
        "listSchemas",
        "listSolutionVersions",
        "listSolutions",
        "updateCampaign"
      ]
    },
    PersonalizeEvents: { name: "PersonalizeEvents", methods: ["putEvents"] },
    PersonalizeRuntime: {
      name: "PersonalizeRuntime",
      methods: ["getPersonalizedRanking", "getRecommendations"]
    },
    ApplicationInsights: {
      name: "ApplicationInsights",
      methods: [
        "createApplication",
        "createComponent",
        "createLogPattern",
        "deleteApplication",
        "deleteComponent",
        "deleteLogPattern",
        "describeApplication",
        "describeComponent",
        "describeComponentConfiguration",
        "describeComponentConfigurationRecommendation",
        "describeLogPattern",
        "describeObservation",
        "describeProblem",
        "describeProblemObservations",
        "listApplications",
        "listComponents",
        "listLogPatternSets",
        "listLogPatterns",
        "listProblems",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateComponent",
        "updateComponentConfiguration",
        "updateLogPattern"
      ]
    },
    ServiceQuotas: {
      name: "ServiceQuotas",
      methods: [
        "associateServiceQuotaTemplate",
        "deleteServiceQuotaIncreaseRequestFromTemplate",
        "disassociateServiceQuotaTemplate",
        "getAWSDefaultServiceQuota",
        "getAssociationForServiceQuotaTemplate",
        "getRequestedServiceQuotaChange",
        "getServiceQuota",
        "getServiceQuotaIncreaseRequestFromTemplate",
        "listAWSDefaultServiceQuotas",
        "listRequestedServiceQuotaChangeHistory",
        "listRequestedServiceQuotaChangeHistoryByQuota",
        "listServiceQuotaIncreaseRequestsInTemplate",
        "listServiceQuotas",
        "listServices",
        "putServiceQuotaIncreaseRequestIntoTemplate",
        "requestServiceQuotaIncrease"
      ]
    },
    EC2InstanceConnect: {
      name: "EC2InstanceConnect",
      methods: ["sendSSHPublicKey"]
    },
    EventBridge: {
      name: "EventBridge",
      methods: [
        "activateEventSource",
        "createEventBus",
        "createPartnerEventSource",
        "deactivateEventSource",
        "deleteEventBus",
        "deletePartnerEventSource",
        "deleteRule",
        "describeEventBus",
        "describeEventSource",
        "describePartnerEventSource",
        "describeRule",
        "disableRule",
        "enableRule",
        "listEventBuses",
        "listEventSources",
        "listPartnerEventSourceAccounts",
        "listPartnerEventSources",
        "listRuleNamesByTarget",
        "listRules",
        "listTagsForResource",
        "listTargetsByRule",
        "putEvents",
        "putPartnerEvents",
        "putPermission",
        "putRule",
        "putTargets",
        "removePermission",
        "removeTargets",
        "tagResource",
        "testEventPattern",
        "untagResource"
      ]
    },
    LakeFormation: {
      name: "LakeFormation",
      methods: [
        "batchGrantPermissions",
        "batchRevokePermissions",
        "deregisterResource",
        "describeResource",
        "getDataLakeSettings",
        "getEffectivePermissionsForPath",
        "grantPermissions",
        "listPermissions",
        "listResources",
        "putDataLakeSettings",
        "registerResource",
        "revokePermissions",
        "updateResource"
      ]
    },
    ForecastService: {
      name: "ForecastService",
      methods: [
        "createDataset",
        "createDatasetGroup",
        "createDatasetImportJob",
        "createForecast",
        "createForecastExportJob",
        "createPredictor",
        "deleteDataset",
        "deleteDatasetGroup",
        "deleteDatasetImportJob",
        "deleteForecast",
        "deleteForecastExportJob",
        "deletePredictor",
        "describeDataset",
        "describeDatasetGroup",
        "describeDatasetImportJob",
        "describeForecast",
        "describeForecastExportJob",
        "describePredictor",
        "getAccuracyMetrics",
        "listDatasetGroups",
        "listDatasetImportJobs",
        "listDatasets",
        "listForecastExportJobs",
        "listForecasts",
        "listPredictors",
        "updateDatasetGroup"
      ]
    },
    ForecastQueryService: {
      name: "ForecastQueryService",
      methods: ["queryForecast"]
    },
    QLDB: {
      name: "QLDB",
      methods: [
        "createLedger",
        "deleteLedger",
        "describeJournalS3Export",
        "describeLedger",
        "exportJournalToS3",
        "getBlock",
        "getDigest",
        "getRevision",
        "listJournalS3Exports",
        "listJournalS3ExportsForLedger",
        "listLedgers",
        "listTagsForResource",
        "tagResource",
        "untagResource",
        "updateLedger"
      ]
    },
    QLDBSession: { name: "QLDBSession", methods: ["sendCommand"] },
    WorkMailMessageFlow: {
      name: "WorkMailMessageFlow",
      methods: ["getRawMessageContent"]
    },
    CodeStarNotifications: {
      name: "CodeStarNotifications",
      methods: [
        "createNotificationRule",
        "deleteNotificationRule",
        "deleteTarget",
        "describeNotificationRule",
        "listEventTypes",
        "listNotificationRules",
        "listTagsForResource",
        "listTargets",
        "subscribe",
        "tagResource",
        "unsubscribe",
        "untagResource",
        "updateNotificationRule"
      ]
    },
    SavingsPlans: {
      name: "SavingsPlans",
      methods: [
        "createSavingsPlan",
        "describeSavingsPlanRates",
        "describeSavingsPlans",
        "describeSavingsPlansOfferingRates",
        "describeSavingsPlansOfferings",
        "listTagsForResource",
        "tagResource",
        "untagResource"
      ]
    },
    SSO: {
      name: "SSO",
      methods: [
        "getRoleCredentials",
        "listAccountRoles",
        "listAccounts",
        "logout"
      ]
    },
    SSOOIDC: {
      name: "SSOOIDC",
      methods: ["createToken", "registerClient", "startDeviceAuthorization"]
    },
    MarketplaceCatalog: {
      name: "MarketplaceCatalog",
      methods: [
        "cancelChangeSet",
        "describeChangeSet",
        "describeEntity",
        "listChangeSets",
        "listEntities",
        "startChangeSet"
      ]
    },
    DataExchange: {
      name: "DataExchange",
      methods: [
        "cancelJob",
        "createDataSet",
        "createJob",
        "createRevision",
        "deleteAsset",
        "deleteDataSet",
        "deleteRevision",
        "getAsset",
        "getDataSet",
        "getJob",
        "getRevision",
        "listDataSetRevisions",
        "listDataSets",
        "listJobs",
        "listRevisionAssets",
        "listTagsForResource",
        "startJob",
        "tagResource",
        "untagResource",
        "updateAsset",
        "updateDataSet",
        "updateRevision"
      ]
    },
    SESV2: {
      name: "SESV2",
      methods: [
        "createConfigurationSet",
        "createConfigurationSetEventDestination",
        "createDedicatedIpPool",
        "createDeliverabilityTestReport",
        "createEmailIdentity",
        "deleteConfigurationSet",
        "deleteConfigurationSetEventDestination",
        "deleteDedicatedIpPool",
        "deleteEmailIdentity",
        "deleteSuppressedDestination",
        "getAccount",
        "getBlacklistReports",
        "getConfigurationSet",
        "getConfigurationSetEventDestinations",
        "getDedicatedIp",
        "getDedicatedIps",
        "getDeliverabilityDashboardOptions",
        "getDeliverabilityTestReport",
        "getDomainDeliverabilityCampaign",
        "getDomainStatisticsReport",
        "getEmailIdentity",
        "getSuppressedDestination",
        "listConfigurationSets",
        "listDedicatedIpPools",
        "listDeliverabilityTestReports",
        "listDomainDeliverabilityCampaigns",
        "listEmailIdentities",
        "listSuppressedDestinations",
        "listTagsForResource",
        "putAccountDedicatedIpWarmupAttributes",
        "putAccountSendingAttributes",
        "putAccountSuppressionAttributes",
        "putConfigurationSetDeliveryOptions",
        "putConfigurationSetReputationOptions",
        "putConfigurationSetSendingOptions",
        "putConfigurationSetSuppressionOptions",
        "putConfigurationSetTrackingOptions",
        "putDedicatedIpInPool",
        "putDedicatedIpWarmupAttributes",
        "putDeliverabilityDashboardOption",
        "putEmailIdentityDkimAttributes",
        "putEmailIdentityDkimSigningAttributes",
        "putEmailIdentityFeedbackAttributes",
        "putEmailIdentityMailFromAttributes",
        "putSuppressedDestination",
        "sendEmail",
        "tagResource",
        "untagResource",
        "updateConfigurationSetEventDestination"
      ]
    },
    MigrationHubConfig: {
      name: "MigrationHubConfig",
      methods: [
        "createHomeRegionControl",
        "describeHomeRegionControls",
        "getHomeRegion"
      ]
    },
    ConnectParticipant: {
      name: "ConnectParticipant",
      methods: [
        "createParticipantConnection",
        "disconnectParticipant",
        "getTranscript",
        "sendEvent",
        "sendMessage"
      ]
    },
    AppConfig: {
      name: "AppConfig",
      methods: [
        "createApplication",
        "createConfigurationProfile",
        "createDeploymentStrategy",
        "createEnvironment",
        "deleteApplication",
        "deleteConfigurationProfile",
        "deleteDeploymentStrategy",
        "deleteEnvironment",
        "getApplication",
        "getConfiguration",
        "getConfigurationProfile",
        "getDeployment",
        "getDeploymentStrategy",
        "getEnvironment",
        "listApplications",
        "listConfigurationProfiles",
        "listDeploymentStrategies",
        "listDeployments",
        "listEnvironments",
        "listTagsForResource",
        "startDeployment",
        "stopDeployment",
        "tagResource",
        "untagResource",
        "updateApplication",
        "updateConfigurationProfile",
        "updateDeploymentStrategy",
        "updateEnvironment",
        "validateConfiguration"
      ]
    },
    IoTSecureTunneling: {
      name: "IoTSecureTunneling",
      methods: [
        "closeTunnel",
        "describeTunnel",
        "listTagsForResource",
        "listTunnels",
        "openTunnel",
        "tagResource",
        "untagResource"
      ]
    },
    WAFV2: {
      name: "WAFV2",
      methods: [
        "associateWebACL",
        "checkCapacity",
        "createIPSet",
        "createRegexPatternSet",
        "createRuleGroup",
        "createWebACL",
        "deleteIPSet",
        "deleteLoggingConfiguration",
        "deleteRegexPatternSet",
        "deleteRuleGroup",
        "deleteWebACL",
        "describeManagedRuleGroup",
        "disassociateWebACL",
        "getIPSet",
        "getLoggingConfiguration",
        "getRateBasedStatementManagedKeys",
        "getRegexPatternSet",
        "getRuleGroup",
        "getSampledRequests",
        "getWebACL",
        "getWebACLForResource",
        "listAvailableManagedRuleGroups",
        "listIPSets",
        "listLoggingConfigurations",
        "listRegexPatternSets",
        "listResourcesForWebACL",
        "listRuleGroups",
        "listTagsForResource",
        "listWebACLs",
        "putLoggingConfiguration",
        "tagResource",
        "untagResource",
        "updateIPSet",
        "updateRegexPatternSet",
        "updateRuleGroup",
        "updateWebACL"
      ]
    },
    ElasticInference: {
      name: "ElasticInference",
      methods: ["listTagsForResource", "tagResource", "untagResource"]
    },
    Imagebuilder: {
      name: "Imagebuilder",
      methods: [
        "cancelImageCreation",
        "createComponent",
        "createDistributionConfiguration",
        "createImage",
        "createImagePipeline",
        "createImageRecipe",
        "createInfrastructureConfiguration",
        "deleteComponent",
        "deleteDistributionConfiguration",
        "deleteImage",
        "deleteImagePipeline",
        "deleteImageRecipe",
        "deleteInfrastructureConfiguration",
        "getComponent",
        "getComponentPolicy",
        "getDistributionConfiguration",
        "getImage",
        "getImagePipeline",
        "getImagePolicy",
        "getImageRecipe",
        "getImageRecipePolicy",
        "getInfrastructureConfiguration",
        "importComponent",
        "listComponentBuildVersions",
        "listComponents",
        "listDistributionConfigurations",
        "listImageBuildVersions",
        "listImagePipelineImages",
        "listImagePipelines",
        "listImageRecipes",
        "listImages",
        "listInfrastructureConfigurations",
        "listTagsForResource",
        "putComponentPolicy",
        "putImagePolicy",
        "putImageRecipePolicy",
        "startImagePipelineExecution",
        "tagResource",
        "untagResource",
        "updateDistributionConfiguration",
        "updateImagePipeline",
        "updateInfrastructureConfiguration"
      ]
    },
    Schemas: {
      name: "Schemas",
      methods: [
        "createDiscoverer",
        "createRegistry",
        "createSchema",
        "deleteDiscoverer",
        "deleteRegistry",
        "deleteSchema",
        "deleteSchemaVersion",
        "describeCodeBinding",
        "describeDiscoverer",
        "describeRegistry",
        "describeSchema",
        "getCodeBindingSource",
        "getDiscoveredSchema",
        "listDiscoverers",
        "listRegistries",
        "listSchemaVersions",
        "listSchemas",
        "listTagsForResource",
        "lockServiceLinkedRole",
        "putCodeBinding",
        "searchSchemas",
        "startDiscoverer",
        "stopDiscoverer",
        "tagResource",
        "unlockServiceLinkedRole",
        "untagResource",
        "updateDiscoverer",
        "updateRegistry",
        "updateSchema"
      ]
    },
    AccessAnalyzer: {
      name: "AccessAnalyzer",
      methods: [
        "createAnalyzer",
        "createArchiveRule",
        "deleteAnalyzer",
        "deleteArchiveRule",
        "getAnalyzedResource",
        "getAnalyzer",
        "getArchiveRule",
        "getFinding",
        "listAnalyzedResources",
        "listAnalyzers",
        "listArchiveRules",
        "listFindings",
        "listTagsForResource",
        "startResourceScan",
        "tagResource",
        "untagResource",
        "updateArchiveRule",
        "updateFindings"
      ]
    },
    CodeGuruReviewer: {
      name: "CodeGuruReviewer",
      methods: [
        "associateRepository",
        "describeRepositoryAssociation",
        "disassociateRepository",
        "listRepositoryAssociations"
      ]
    },
    CodeGuruProfiler: {
      name: "CodeGuruProfiler",
      methods: [
        "configureAgent",
        "createProfilingGroup",
        "deleteProfilingGroup",
        "describeProfilingGroup",
        "getProfile",
        "listProfileTimes",
        "listProfilingGroups",
        "postAgentProfile",
        "updateProfilingGroup"
      ]
    },
    ComputeOptimizer: {
      name: "ComputeOptimizer",
      methods: [
        "getAutoScalingGroupRecommendations",
        "getEC2InstanceRecommendations",
        "getEC2RecommendationProjectedMetrics",
        "getEnrollmentStatus",
        "getRecommendationSummaries",
        "updateEnrollmentStatus"
      ]
    },
    FraudDetector: {
      name: "FraudDetector",
      methods: [
        "batchCreateVariable",
        "batchGetVariable",
        "createDetectorVersion",
        "createModelVersion",
        "createRule",
        "createVariable",
        "deleteDetectorVersion",
        "deleteEvent",
        "describeDetector",
        "describeModelVersions",
        "getDetectorVersion",
        "getDetectors",
        "getExternalModels",
        "getModelVersion",
        "getModels",
        "getOutcomes",
        "getPrediction",
        "getRules",
        "getVariables",
        "putDetector",
        "putExternalModel",
        "putModel",
        "putOutcome",
        "updateDetectorVersion",
        "updateDetectorVersionMetadata",
        "updateDetectorVersionStatus",
        "updateModelVersion",
        "updateRuleMetadata",
        "updateRuleVersion",
        "updateVariable"
      ]
    },
    Kendra: {
      name: "Kendra",
      methods: [
        "batchDeleteDocument",
        "batchPutDocument",
        "createDataSource",
        "createFaq",
        "createIndex",
        "deleteFaq",
        "deleteIndex",
        "describeDataSource",
        "describeFaq",
        "describeIndex",
        "listDataSourceSyncJobs",
        "listDataSources",
        "listFaqs",
        "listIndices",
        "query",
        "startDataSourceSyncJob",
        "stopDataSourceSyncJob",
        "submitFeedback",
        "updateDataSource",
        "updateIndex"
      ]
    },
    NetworkManager: {
      name: "NetworkManager",
      methods: [
        "associateCustomerGateway",
        "associateLink",
        "createDevice",
        "createGlobalNetwork",
        "createLink",
        "createSite",
        "deleteDevice",
        "deleteGlobalNetwork",
        "deleteLink",
        "deleteSite",
        "deregisterTransitGateway",
        "describeGlobalNetworks",
        "disassociateCustomerGateway",
        "disassociateLink",
        "getCustomerGatewayAssociations",
        "getDevices",
        "getLinkAssociations",
        "getLinks",
        "getSites",
        "getTransitGatewayRegistrations",
        "listTagsForResource",
        "registerTransitGateway",
        "tagResource",
        "untagResource",
        "updateDevice",
        "updateGlobalNetwork",
        "updateLink",
        "updateSite"
      ]
    },
    Outposts: {
      name: "Outposts",
      methods: [
        "createOutpost",
        "getOutpost",
        "getOutpostInstanceTypes",
        "listOutposts",
        "listSites"
      ]
    },
    AugmentedAIRuntime: {
      name: "AugmentedAIRuntime",
      methods: [
        "deleteHumanLoop",
        "describeHumanLoop",
        "listHumanLoops",
        "startHumanLoop",
        "stopHumanLoop"
      ]
    },
    EBS: {
      name: "EBS",
      methods: ["getSnapshotBlock", "listChangedBlocks", "listSnapshotBlocks"]
    },
    KinesisVideoSignalingChannels: {
      name: "KinesisVideoSignalingChannels",
      methods: ["getIceServerConfig", "sendAlexaOfferToMaster"]
    },
    Detective: {
      name: "Detective",
      methods: [
        "acceptInvitation",
        "createGraph",
        "createMembers",
        "deleteGraph",
        "deleteMembers",
        "disassociateMembership",
        "getMembers",
        "listGraphs",
        "listInvitations",
        "listMembers",
        "rejectInvitation"
      ]
    },
    CodeStarconnections: {
      name: "CodeStarconnections",
      methods: [
        "createConnection",
        "deleteConnection",
        "getConnection",
        "listConnections"
      ]
    }
  };

  RED.nodes.registerType("aws-sdk-any", {
    category: "AWS",
    color: "#FF9A00",
    defaults: {
      aws: { type: "aws-sdk-any-config", required: true },
      region: { value: "" },
      servicename: { value: "" },
      methodname: { value: "" },
      operation: { value: "" },
      name: { value: "" }
    },
    inputs: 1,
    outputs: 1,
    icon: "aws.png",
    align: "left",
    label: function() {
      return this.name || "aws " + this.servicename + " " + this.methodname;
    },
    oneditprepare: function() {
      $(function() {
        const $serviceName = $("#node-input-servicename");
        const $methodName = $("#node-input-methodname");
        const $methodDataList = $("#node-config-input-method-list");

        $serviceName.on("input paste", event => {
          const methodName = event.currentTarget.value;

          $methodName.val("");
          $methodDataList.empty();

          try {
            const { methods } = serviceDefinitions[methodName];

            if (methods) {
              const methodList = methods
                .map(method => `<option>${method}</option>`)
                .join("");

              $methodDataList.html(methodList);
            }
          } catch {}
        });
        $methodName.on("input paste", event => {
          // TODO:
          // Test this after operations are added in runner.
          const serviceName = $serviceName.val();
          const { operations } = serviceDefinitions[serviceName];
          const methodName = event.currentTarget.value;

          if (operations) {
            const operations = methods
              .map(method => `<option>${method}</option>`)
              .join("");
          }
        });
      });
    }
  });
})(jQuery);
